{"version":3,"sources":["models/Bird_simple.glb","components/Utility.js","components/PatternManager.js","components/Agent.js","components/Pigeon.js","components/Target.js","components/OctreeManager.js","components/World.js","components/App.js","index.js"],"names":["module","exports","axisRotation","axis_x","axis_y","axis_z","angle_radians","q","norm","Math","sqrt","cos","sin","set","Pattern","patternObj","this","theta_rad","amp","isClockwise","dir","originPos","pos","moveFactor","move","targetPos","THREE","maxTheta","r","x","z","y","EllipsePattern","radX","radx","radZ","radz","PI","xPos","cartesianX","zPos","cartesianZ","yPos","cartesianY","updateTheta","FLOCKING_WEIGHTS","Agent","position","random","velocity","acceleration","rotationA","rotationB","fSteer","vDesired","sumVec","diffVec","maxForce","maxSpeed","getRandomArbitrary","maxSlowDownSpeed","slowDownTolerance","arriveTolerance","smoothFactor","target","nAgents","seekTarget","flock","updatePosition","seek","applyForce","length","seperation","cohesion","align","addVectors","lerp","clampLength","add","multiplyScalar","subVectors","normalize","value","low1","high1","low2","high2","d","lengthSq","newMaxSpeed","forEach","n","divideScalar","a","sub","copy","min","max","loader","GLTFLoader","Pigeon","scene","loadPigeon","load","model","gltf","pigeon","parent","frustumCulled","castShadow","receiveShadow","agentPosition","agentRotation","rotation","agentScale","scale","agentAnimations","animations","animationMixer","clipAction","play","undefined","error","console","delta","update","updateAgent","syncPosition","syncRotation","azimuth","inclination","v","atan2","acos","Utility","multiply","setRotationFromQuaternion","Target","geometry","material","color","wireframe","mesh","visible","Octree","origin","boundary","Vector3","tree","PointOctree","agent","insert","radius","findPoints","pointCount","OctreeManager","flockOctree","flockTarget","liarbirds","setupOctree","l","insertPoint","scanForPoints","push","OrbitControls","oc","styles","container","zIndex","top","overflowX","overflowY","guiParams","showGrid","showTarget","World","props","state","ref","React","createRef","setupCamera","setupProps","setupGui","setupLighting","setupRenderer","setupOrbitControls","stats","Stats","clock","setupPattern","octreeManager","pigeons","current","appendChild","renderer","domElement","dom","i","p","initThreeRender","grid","setVisibility","getDelta","ellipsePattern","patternPos","getTargetPos","setTarget","getNeighbours","setVector","style","begin","controls","render","camera","end","requestAnimationFrame","bind","antialias","setClearColor","setSize","window","innerWidth","innerHeight","setPixelRatio","devicePixelRatio","outputEncoding","enablePan","enabled","enableKeys","lookAt","box","r1","r2","side","plane","ambientLight","intensity","directionalLight","gui","dat","name","amplitude","ellipseConstructor","degToRad","Component","Radium","App","totalRef","worldRef","log","scrollHeight","ReactDOM","document","getElementById"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,yC,qQCgBrCC,EAAe,SAACC,EAAQC,EAAQC,EAAQC,EAAeC,GACzD,IAAIC,EAAOC,KAAKC,KAAKP,EAASA,EAASC,EAASA,EAASC,EAASA,GAClEF,GAAUK,EACVJ,GAAUI,EACVH,GAAUG,EACV,IAAIG,EAAMF,KAAKE,IAAIL,EAAgB,GAC/BM,EAAMH,KAAKG,IAAIN,EAAgB,GACnCC,EAAEM,IAAIV,EAASS,EAAKR,EAASQ,EAAKP,EAASO,EAAKD,ICrB9CG,E,WACF,WAAYC,GAAa,oBACrBC,KAAKC,UAAY,EACjBD,KAAKE,IAAMH,EAAWG,IACtBF,KAAKG,YAAcJ,EAAWK,IAC9BJ,KAAKK,UAAYN,EAAWO,IAC5BN,KAAKO,WAAaR,EAAWS,KAC7BR,KAAKS,UAAY,IAAIC,UAAc,EAAG,EAAG,G,+CAG7C,SAAYC,GAERX,KAAKC,UAAYD,KAAKG,YAClBH,KAAKC,UAAYD,KAAKO,WACtBP,KAAKC,UAAYD,KAAKO,WAG1BP,KAAKC,UAAYD,KAAKC,WAAaU,EAAW,EAAIX,KAAKC,Y,wBAG3D,SAAWW,GACP,OAAOZ,KAAKK,UAAUQ,EAAID,EAAInB,KAAKE,IAAIK,KAAKC,a,wBAGhD,SAAWW,GACP,OAAOZ,KAAKK,UAAUS,EAAIF,EAAInB,KAAKG,IAAII,KAAKC,a,wBAGhD,SAAWW,GACP,OAAOZ,KAAKK,UAAUU,EAAIf,KAAKE,IAAMT,KAAKG,IAAII,KAAKC,a,0BAGvD,WACI,OAAOD,KAAKS,Y,4BAKhB,gB,KAgBSO,EAAb,kDACI,WAAYjB,GAAa,IAAD,8BACpB,cAAMA,IACDkB,KAAOlB,EAAWmB,KACvB,EAAKC,KAAOpB,EAAWqB,KACvB,EAAKT,SAAW,EAAElB,KAAK4B,GAJH,EAD5B,0CAQI,WAEI,IAAIC,EAAOtB,KAAKuB,WAAWvB,KAAKiB,MAC5BO,EAAOxB,KAAKyB,WAAWzB,KAAKmB,MAC5BO,EAAO1B,KAAK2B,aAChB3B,KAAKS,UAAUZ,IAAIyB,EAAMI,EAAMF,GAE/BxB,KAAK4B,YAAY5B,KAAKW,cAf9B,GAAoCb,GCpD9B+B,EACU,GADVA,EAEQ,GAFRA,EAGS,GAGMC,E,WACjB,aAAe,oBAGX9B,KAAK+B,SAAW,IAAIrB,UAA8B,GAAhBjB,KAAKuC,SAAe,EAAG,GACzDhC,KAAKiC,SAAW,IAAIvB,UAAc,GAAK,GAAK,IAC5CV,KAAKkC,aAAe,IAAIxB,UAAc,EAAG,EAAG,GAC5CV,KAAKmC,UAAY,IAAIzB,aACrBV,KAAKoC,UAAY,IAAI1B,aACrBV,KAAKqC,OAAS,IAAI3B,UAAc,EAAG,EAAG,GACtCV,KAAKsC,SAAW,IAAI5B,UAAc,EAAG,EAAG,GAGxCV,KAAKuC,OAAS,IAAI7B,UAAc,EAAG,EAAG,GACtCV,KAAKwC,QAAU,IAAI9B,UAAc,EAAG,EAAG,GAGvCV,KAAKyC,SAAW,IAChBzC,KAAK0C,SAAW1C,KAAK2C,mBAAmB,KAAO,MAC/C3C,KAAK4C,iBAAmB,EAGxB5C,KAAK6C,kBAAoB,GAAM,GAC/B7C,KAAK8C,gBAAkB,KACvB9C,KAAK+C,aAAe,IAGpB/C,KAAKgD,OAAS,IAAItC,UAAc,EAAG,EAAG,G,+CAG1C,SAAYuC,GACRjD,KAAKkD,aACLlD,KAAKmD,MAAMF,GACXjD,KAAKoD,mB,wBAGT,WACIpD,KAAKqD,OACLrD,KAAKsD,e,mBAGT,SAAML,GACEA,EAAQM,OAAS,IACjBvD,KAAKwD,WAAWP,GAChBjD,KAAKsD,aAELtD,KAAKyD,SAASR,GACdjD,KAAKsD,aAELtD,KAAK0D,MAAMT,GACXjD,KAAKsD,gB,4BAIb,WAEItD,KAAKuC,OAAOoB,WAAW3D,KAAKiC,SAAUjC,KAAKkC,cAI3ClC,KAAKiC,SAAWjC,KAAKiC,SAAS2B,KAAK5D,KAAKuC,OAAQvC,KAAK+C,cACrD/C,KAAKiC,SAAS4B,aAAa,KAAM7D,KAAK0C,UAEtC1C,KAAK+B,SAAS+B,IAAI9D,KAAKiC,UACvBjC,KAAKkC,aAAa6B,eAAe,K,wBAGrC,WAEI/D,KAAKkC,aAAa4B,IAAI9D,KAAKqC,U,kBAG/B,WAEIrC,KAAKsC,SAAS0B,WAAWhE,KAAKgD,OAAQhD,KAAK+B,UAC3C/B,KAAKsC,SAAS2B,YAEd,IFnFWC,EAAOC,EAAMC,EAAOC,EAAMC,EEmFjCC,EAAIvE,KAAKsC,SAASkC,WACtB,GAAID,EAAIvE,KAAK6C,mBAAqB0B,EAAIvE,KAAK8C,gBAAiB,CACxD,IAAI2B,GFrFGP,EEqF6BK,EFrFtBJ,EEqFyBnE,KAAK6C,kBFrFxBuB,EEqF2CpE,KAAK8C,gBFrFzCuB,EEqF0DrE,KAAK0C,SFrFzD4B,EEqFmEtE,KAAK4C,iBFpF1GyB,GAAQC,EAAQD,IAASH,EAAQC,IAASC,EAAQD,IEqFjDnE,KAAKsC,SAASyB,eAAeU,QAE7BzE,KAAKsC,SAASyB,eAAe/D,KAAK0C,UAItC1C,KAAKqC,OAAO2B,WAAWhE,KAAKsC,SAAUtC,KAAKiC,UAC3CjC,KAAKqC,OAAOwB,aAAa,MAAO7D,KAAKyC,Y,wBAGzC,SAAWQ,GAAU,IAAD,OAChBjD,KAAKqC,OAAOxC,IAAI,EAAG,EAAG,GACtBG,KAAKuC,OAAO1C,IAAI,EAAG,EAAG,GAElBoD,EAAQM,OAAS,IACjBN,EAAQyB,SAAQ,SAAAC,GACZ,EAAKnC,QAAQwB,WAAW,EAAKjC,SAAU4C,EAAE5C,UACzC,EAAKS,QAAQyB,YACb,EAAKzB,QAAQoC,aAAa,EAAKpC,QAAQe,UACvC,EAAKhB,OAAOuB,IAAI,EAAKtB,YAIzBxC,KAAKuC,OAAOqC,aAAa3B,EAAQM,QAC7BvD,KAAKuC,OAAOiC,WAAa,IACzBxE,KAAKuC,OAAO0B,YACZjE,KAAKuC,OAAOsB,aAAa,MAAO7D,KAAK0C,UACrC1C,KAAKqC,OAAO2B,WAAWhE,KAAKuC,OAAQvC,KAAKiC,UACzCjC,KAAKqC,OAAOwB,aAAa,MAAO7D,KAAKyC,UACrCzC,KAAKqC,OAAO0B,eAAelC,O,sBAKvC,SAASoB,GAAU,IAAD,OACdjD,KAAKgD,OAAOnD,IAAI,EAAG,EAAG,GACtBG,KAAKqC,OAAOxC,IAAI,EAAG,EAAG,GAElBoD,EAAQM,OAAS,IACjBN,EAAQyB,SAAQ,SAAAC,GACZ,EAAK3B,OAAOc,IAAIa,EAAE5C,aAGtB/B,KAAKgD,OAAO4B,aAAa3B,EAAQM,QACjCvD,KAAKqD,OACLrD,KAAKqC,OAAO0B,eAAelC,M,mBAInC,SAAMoB,GAAU,IAAD,OACXjD,KAAKqC,OAAOxC,IAAI,EAAG,EAAG,GAElBoD,EAAQM,OAAS,IACjBN,EAAQyB,SAAQ,SAAAG,GACZ,EAAKxC,OAAOyB,IAAIe,EAAE5C,aAGtBjC,KAAKqC,OAAOuC,aAAa3B,EAAQM,QACjCvD,KAAKqC,OAAO4B,YACZjE,KAAKqC,OAAO0B,eAAe/D,KAAK0C,UAChC1C,KAAKqC,OAAOyC,IAAI9E,KAAKiC,UACrBjC,KAAKqC,OAAOwB,aAAa,MAAO7D,KAAKyC,UACrCzC,KAAKqC,OAAO0B,eAAelC,M,uBAInC,SAAUpB,GACNT,KAAKgD,OAAO+B,KAAKtE,K,gCAGrB,SAAmBuE,EAAKC,GACrB,OAAOxF,KAAKuC,UAAYiD,EAAMD,GAAOA,M,sBCnJtCE,EAAS,IAAIC,IAEEC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,gBACKC,WAAWD,GAFD,E,8CAKnB,SAAWA,GAAQ,IAAD,OACdH,EAAOK,KAAKC,KAAO,SAAAC,GACf,EAAKC,OAASD,EAAKJ,MAGnB,EAAKM,OAAS,IAAIjF,QAClB,EAAKiF,OAAO7B,IAAI,EAAK4B,QACrB,EAAKC,OAAOC,eAAgB,EAC5B,EAAKD,OAAOE,YAAa,EACzB,EAAKF,OAAOG,eAAgB,EAG5B,EAAKC,cAAgB,EAAKJ,OAAO5D,SACjC,EAAKiE,cAAgB,EAAKL,OAAOM,SACjC,EAAKC,WAAa,EAAKP,OAAOQ,MAC9B,EAAKC,gBAAkBX,EAAKY,WAE5B,EAAKH,WAAWrG,IAAI,IAAM,IAAM,KAGhC,EAAKyG,eAAiB,IAAI5F,iBAAqB,EAAKiF,QACvC,EAAKW,eAAeC,WAAW,EAAKH,gBAAgB,IAC1DI,OAGPnB,EAAMvB,IAAI,EAAK6B,eAChBc,GAAW,SAAWC,GACrBC,QAAQD,MAAMA,Q,oBAItB,SAAOE,EAAO3D,GAENjD,KAAKsG,iBACLtG,KAAKsG,eAAeO,OAAOD,GAG3B5G,KAAK8G,YAAY7D,GAGjBjD,KAAK+G,eACL/G,KAAKgH,kB,0BAIb,WAGIhH,KAAK2F,OAAO5D,SAASgD,KAAK/E,KAAK+B,Y,0BAGnC,WAEI,IAAIkF,EAASC,EHnEJC,IGoEiBnH,KAAKiC,SAA/BgF,EHnEGxH,KAAK2H,MAAMD,EAAEtG,EAAGsG,EAAErG,GGoErBoG,EHjEY,SAACC,GACjB,OAAO1H,KAAK4H,KAAKF,EAAEpG,EAAIoG,EAAE5D,UGgEP+D,CAAoBtH,KAAKiC,UAEvCqF,EAAqB,EAAG,EAAG,EAAGL,EAASjH,KAAKmC,WAC5CmF,EAAqB,EAAG,EAAG,EAAGJ,EAAczH,KAAK4B,GAAG,EAAGrB,KAAKoC,WAE5DpC,KAAKmC,UAAUoF,SAASvH,KAAKoC,WAC7BpC,KAAK2F,OAAO6B,0BAA0BxH,KAAKmC,e,GAnEfL,GCdf2F,E,WACjB,WAAYpC,GAAQ,oBAChB,IAAIqC,EAAW,IAAIhH,iBAAqB,GAAK,GAAI,IAC7CiH,EAAW,IAAIjH,sBAA0B,CAACkH,MAAO,IAAIlH,QAAY,EAAG,EAAG,GAAImH,WAAW,IAC1F7H,KAAK8H,KAAO,IAAIpH,OAAWgH,EAAUC,GAErCtC,EAAMvB,IAAI9D,KAAK8H,M,6CAGnB,WACI,OAAO9H,KAAK8H,KAAK/F,W,uBAGrB,SAAUoF,GACNnH,KAAK8H,KAAK/F,SAASgD,KAAKoC,K,2BAG5B,SAAcA,GACVnH,KAAK8H,KAAKC,QAAUZ,M,oBCJfa,EAAb,WACI,WAAYC,EAAQC,GAAW,oBAC3B,IAAIlD,EAAM,IAAImD,IAAQ,EAAG,EAAG,GACxBlD,EAAM,IAAIkD,IAAQ,EAAG,EAAG,GAE5BnD,EAAInE,EAAIoH,EAAOpH,EAAIqH,EACnBlD,EAAIjE,EAAIkH,EAAOlH,EAAImH,EACnBlD,EAAIlE,EAAImH,EAAOnH,EAAIoH,EAEnBjD,EAAIpE,EAAIoH,EAAOpH,EAAIqH,EACnBjD,EAAIlE,EAAIkH,EAAOlH,EAAImH,EACnBjD,EAAInE,EAAImH,EAAOnH,EAAIoH,EAEnBlI,KAAKoI,KAAO,IAAIC,IAAYrD,EAAKC,EAf5B,EACM,GACnB,+CAiBI,SAAYlD,EAAUuG,GAClBtI,KAAKoI,KAAKG,OAAOxG,EAAUuG,KAlBnC,2BAsBI,SAAcvG,EAAUyG,GACpB,OAAOxI,KAAKoI,KAAKK,WAAW1G,EAAUyG,GAAQ,KAvBtD,wBA0BI,WACI,OAAOxI,KAAKoI,KAAKM,eA3BzB,KAiCaC,EAAb,WACI,aAAe,oBACX3I,KAAK4I,YAAc,GAF3B,0CAKI,SAAOC,EAAaC,GAChB9I,KAAK+I,YAAYF,EAAaC,KANtC,yBASI,SAAYD,EAAaC,GAAY,IAAD,OAChC9I,KAAK4I,YAAc,IAAIZ,EAAOa,EAZT,IAarBC,EAAUpE,SAAQ,SAAAsE,GACd,EAAKJ,YAAYK,YAAYD,EAAEjH,SAAUiH,QAZrD,2BAiBI,SAAcf,GACV,IAAoBhF,EAAQ,GAM5B,OALajD,KAAK4I,YAAYM,cAAcjB,EApB3B,GAqBNvD,SAAQ,SAAAC,GACf,IAAIE,EAAIF,EAAC,KACT1B,EAAQkG,KAAKtE,MAEV5B,MAxBf,KC9BMmG,EAAgBC,IAAG3I,GAQnB4I,EAAS,CACbC,UAAW,CAEPC,OAAQ,EACRC,IAAK,KACLC,UAAW,SACXC,UAAW,SAKXC,EAAY,CAChBC,UAAU,EACVC,YAAY,GAGRC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAM,GAGX,EAAKC,IAAMC,IAAMC,YAGjB,EAAK/E,MAAQ,IAAI3E,QAGjB,EAAK2J,cACL,EAAKC,aACL,EAAKC,WACL,EAAKC,gBACL,EAAKC,gBACL,EAAKC,qBAGL,EAAK1H,OAAS,IAAIyE,EAAO,EAAKpC,OAG9B,EAAKsF,MAAQ,IAAIC,IACjB,EAAKC,MAAQ,IAAInK,QAEjB,EAAKoK,eACL,EAAKC,cAAgB,IAAIpC,EAEzB,EAAKqC,QAAU,GA5BE,E,qDA+BnB,WAEEhL,KAAKkK,IAAIe,QAAQC,YAAYlL,KAAKmL,SAASC,YAC3CpL,KAAKkK,IAAIe,QAAQC,YAAYlL,KAAK2K,MAAMU,KAGxC,IAAK,IAAIC,EAAI,EAAGA,EAxDA,GAwDiBA,IAAK,CAGpC,IAAIC,EAAI,IAAInG,EAAOpF,KAAKqF,OACxBrF,KAAKgL,QAAQ7B,KAAKoC,GAGpBvL,KAAKwL,oB,oBAIP,WAAU,IAAD,OAEPxL,KAAKyL,KAAK1D,QAAU6B,EAAUC,SAC9B7J,KAAKgD,OAAO0I,cAAc9B,EAAUE,YAGpC,IAAIlD,EAAQ5G,KAAK6K,MAAMc,WAGvB3L,KAAK4L,eAAe/E,SACpB,IAAIgF,EAAa7L,KAAK4L,eAAeE,eAKrC9L,KAAK+K,cAAclE,OAAOgF,EAAY7L,KAAKgL,SAE3C,IAAI/H,EAAU,GACdjD,KAAKgL,QAAQtG,SAAQ,SAAA6G,GACnBA,EAAEQ,UAAUF,GACZ5I,EAAU,EAAK8H,cAAciB,cAAcT,EAAExJ,UAC7CwJ,EAAE1E,OAAOD,EAAO3D,MAIlBjD,KAAKgD,OAAOiJ,UAAUJ,K,oBAIxB,WACE,OACE,yBAAKK,MAAO5C,EAAOC,UAAWW,IAAKlK,KAAKkK,Q,6BAI5C,WAEElK,KAAK2K,MAAMwB,QACXnM,KAAK6G,SACL7G,KAAKoM,SAASvF,SACd7G,KAAKmL,SAASkB,OAAOrM,KAAKqF,MAAOrF,KAAKsM,QACtCtM,KAAK2K,MAAM4B,MAGXC,sBAAsBxM,KAAKwL,gBAAgBiB,KAAKzM,S,2BAGlD,WAEEA,KAAKmL,SAAW,IAAIzK,gBAAoB,CACtCgM,WAAW,IAEb1M,KAAKmL,SAASwB,cAAc,QAAU,GACtC3M,KAAKmL,SAASyB,QAAQC,OAAOC,WAAYD,OAAOE,aAChD/M,KAAKmL,SAAS6B,cAAcH,OAAOI,kBACnCjN,KAAKmL,SAAS+B,eAAiBxM,iB,gCAGjC,WACEV,KAAKoM,SAAW,IAAIhD,EAAcpJ,KAAKsM,QACvCtM,KAAKoM,SAASe,WAAY,EAG1BnN,KAAKoM,SAASgB,SAAU,EACxBpN,KAAKoM,SAASiB,YAAa,I,yBAG7B,WAGErN,KAAKsM,OAAS,IAAI5L,oBAAwB,GAAImM,OAAOC,WAAWD,OAAOE,YAAa,IAAM,KAC1F/M,KAAKsM,OAAOvK,SAASlC,IAAI,EAAG,EAAG,GAC/BG,KAAKsM,OAAOgB,OAAO,IAAI5M,UAAc,EAAG,EAAG,IAC3CV,KAAKsM,OAAO1G,eAAgB,I,wBAG9B,WAGE,IAFA,IAES0F,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC5B,IAAM5D,EAAW,IAAIhH,cAAkB,GAAK,GAAK,IAC3CiH,EAAW,IAAIjH,oBAAyB,CAACkH,MAAO,UAChD2F,EAAM,IAAI7M,OAAWgH,EAAUC,GACjC6F,EAAsC,EAAjCxN,KAAK2C,oBAAoB,EAAG,GACjC8K,EAAsC,EAAjCzN,KAAK2C,oBAAoB,EAAG,GACrC4K,EAAIxL,SAASlB,EAAI2M,EACjBD,EAAIxL,SAASjB,EAAI2M,EACjBF,EAAIxL,SAAShB,EAVK,IAWlBf,KAAKqF,MAAMvB,IAAIyJ,GAIjB,IAAM7F,EAAW,IAAIhH,gBAAoB,GAAI,IACvCiH,EAAW,IAAIjH,oBAAyB,CAACkH,MAAO,QAAU8F,KAAMhN,eAChEiN,EAAQ,IAAIjN,OAAWgH,EAAUC,GACvCgG,EAAM1H,SAASpF,EAAIpB,KAAK4B,GAAG,EAC3BrB,KAAKqF,MAAMvB,IAAI6J,GAEf3N,KAAKqF,MAAMvB,IAAI,IAAIpD,aAAiB,KAEpCV,KAAKyL,KAAO,IAAI/K,aAAiB,GAAI,IACrCV,KAAKqF,MAAMvB,IAAI9D,KAAKyL,Q,2BAGtB,WAEE,IAAImC,EAAe,IAAIlN,eAAmB,UAC1CkN,EAAaC,UAAY,IACzB,IAAIC,EAAmB,IAAIpN,mBAAuB,UAClDoN,EAAiBD,UAAY,EAC7BC,EAAiB/L,SAASlC,IAAI,EAAG,GAAI,IAAIoE,YACzCjE,KAAKqF,MAAMvB,IAAI8J,GACf5N,KAAKqF,MAAMvB,IAAIgK,K,sBAGjB,WACE9N,KAAK+N,IAAM,IAAIC,IACfhO,KAAK+N,IAAIjK,IAAI8F,EAAW,YAAaqE,KAAK,aAC1CjO,KAAK+N,IAAIjK,IAAI8F,EAAW,cAAcqE,KAAK,iB,gCAG7C,SAAmBjJ,EAAKC,GACtB,OAAOxF,KAAKuC,UAAYiD,EAAMD,GAAOA,I,0BAIvC,WACE,IAMIjF,ELpL0B,SAACM,EAAWY,EAAME,EAAM+M,EAAW/N,EAAaI,GAC9E,MAAO,CACHD,IAAKD,EACLa,KAAMD,EACNG,KAAMD,EACNjB,IAAKgO,EACL9N,IAAKD,EACLK,KAAMD,GK6KO4N,CANP,IAAIzN,UAAc,EAAG,EAAG,GACvB,GACA,GACD,GACA,EACOA,OAAW0N,SAAS,KAErCpO,KAAK4L,eAAiB,IAAI5K,EAAejB,K,2BAG3C,WACIC,KAAK4L,eAAe/E,a,GA3LNsD,IAAMkE,WAiMXC,cAAOvE,GCjOhBwE,E,kDACJ,WAAYvE,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAM,GAGX,EAAKuE,SAAWrE,IAAMC,YACtB,EAAKqE,SAAWtE,IAAMC,YANL,E,0CASnB,WACE,OACE,6BACI,kBAAC,EAAD,CAAOF,IAAKlK,KAAKyO,c,gCAKzB,WACE9H,QAAQ+H,IAAI1O,KAAKwO,SAASvD,QAAQ0D,kB,GAnBpBxE,IAAMkE,WAuBTC,cAAOC,G,QCxBtBK,IAASvC,OAAO,kBAAC,IAAD,KAAW,kBAAC,EAAD,OAAqBwC,SAASC,eAAe,W","file":"static/js/main.2e32e6c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Bird_simple.d1d4aa0b.glb\";","const getRandomNum = (max = 0, min = 0) => {\n    return Math.floor(Math.random() * (max + 1 - min)) + min;\n}\n\nconst map_range = (value, low1, high1, low2, high2) => {\n    return low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n}\n\nconst azimuth = (v) => {\n    return Math.atan2(v.x, v.z);\n}\n\nconst inclination = (v) => {\n    return Math.acos(v.y / v.length());\n}\n\nconst axisRotation = (axis_x, axis_y, axis_z, angle_radians, q) => {\n    var norm = Math.sqrt(axis_x * axis_x + axis_y * axis_y + axis_z * axis_z);\n    axis_x /= norm;\n    axis_y /= norm;\n    axis_z /= norm;\n    var cos = Math.cos(angle_radians / 2);\n    var sin = Math.sin(angle_radians / 2);\n    q.set(axis_x * sin, axis_y * sin, axis_z * sin, cos); \n}\n\nexport {\n    getRandomNum,\n    map_range,\n    azimuth,\n    inclination,\n    axisRotation\n}","import * as THREE from 'three'\n\nclass Pattern {\n    constructor(patternObj) {\n        this.theta_rad = 0; \n        this.amp = patternObj.amp;  \n        this.isClockwise = patternObj.dir; \n        this.originPos = patternObj.pos; \n        this.moveFactor = patternObj.move; \n        this.targetPos = new THREE.Vector3(0, 0, 0); // Agents follow this target. \n    }\n\n    updateTheta(maxTheta) {\n        // Update theta based on direction. \n        this.theta_rad = this.isClockwise ? \n            this.theta_rad + this.moveFactor : \n            this.theta_rad - this.moveFactor; \n\n        // Reset theta. \n        this.theta_rad = this.theta_rad >= maxTheta ? 0 : this.theta_rad;\n    }\n\n    cartesianX(r) {\n        return this.originPos.x + r * Math.cos(this.theta_rad);\n    }\n\n    cartesianZ(r) {\n        return this.originPos.z + r * Math.sin(this.theta_rad);\n    }\n    \n    cartesianY(r) {\n        return this.originPos.y + this.amp * Math.sin(this.theta_rad);\n    }\n\n    getTargetPos() {\n        return this.targetPos; \n    }\n\n    // Debug Only \n    // To see where we're at. \n    syncPatternObj() {\n        // SparkUtility.syncSceneObject(this.originObj, this.targetPos); \n    }\n}\n\nexport const ellipseConstructor = (originPos, radX, radZ, amplitude, isClockwise, moveFactor) => {\n    return {\n        pos: originPos, // C\n        radx: radX,\n        radz: radZ,\n        amp: amplitude, // C\n        dir: isClockwise, // C\n        move: moveFactor // C\n    }; \n}\n\nexport class EllipsePattern extends Pattern {\n    constructor(patternObj) {\n        super(patternObj); \n        this.radX = patternObj.radx; \n        this.radZ = patternObj.radz; \n        this.maxTheta = 2*Math.PI; \n    }\n\n    update() {\n        // Ellipse: Cartesian coordinates. \n        let xPos = this.cartesianX(this.radX); // Defines polar curve. \n        let zPos = this.cartesianZ(this.radZ); // Define polar curve. \n        let yPos = this.cartesianY(); // Defines height. \n        this.targetPos.set(xPos, yPos, zPos); \n\n        this.updateTheta(this.maxTheta); \n    }\n}\n\nexport const roseConstructor = (originPos, radius, phase, numPetals, amplitude, isSinusoidal, isClockwise, moveFactor) => {\n    return {\n        pos: originPos, // C\n        rad: radius,\n        ph: phase, \n        numP: numPetals,\n        amp: amplitude, // C\n        isSin: isSinusoidal,\n        dir: isClockwise, // C\n        move: moveFactor // C\n    }\n}\n\n// r = asin(b + cTheta); \n// r = acos(b + cTheta); \n// a = radius\n// b = phase\n// c = numPetals\nexport class RosePattern extends Pattern {\n    constructor(patternObj) {\n        super(patternObj); \n        this.rad = patternObj.rad; \n        this.phase = patternObj.ph; \n        this.numPetals = patternObj.numP;\n        this.isSin = patternObj.isSin; \n        this.maxTheta = Math.PI; \n    }\n\n    update() {\n        let xPos, yPos, zPos; \n        let r = this.isSin ? this.rad * Math.sin(this.phase + this.numPetals * this.theta_rad) : \n            this.rad * Math.cos(this.phase + this.numPetals * this.theta_rad)\n\n        xPos = this.cartesianX(r); // Defines polar curve. \n        zPos = this.cartesianZ(r); // Defines polar curve. \n        yPos = this.cartesianY(); // Defines height. \n\n        this.targetPos.set(xPos, yPos, zPos); \n\n        this.updateTheta(this.maxTheta);\n    }\n}","import * as THREE from 'three'\nimport * as Utility from './Utility'\nimport {EllipsePattern, ellipseConstructor} from './PatternManager'\n\nconst FLOCKING_WEIGHTS = {\n    SEPERATION: 0.8,\n    COHESION: 0.5,\n    ALIGNMENT: 0.2\n}\n\nexport default class Agent {\n    constructor() {\n        // this.idx = i; \n        // // Construct all important variables. \n        this.position = new THREE.Vector3(Math.random() * 20, 2, 0); \n        this.velocity = new THREE.Vector3(0.1, 0.1, 0.1); \n        this.acceleration = new THREE.Vector3(0, 0, 0); \n        this.rotationA = new THREE.Quaternion(); \n        this.rotationB = new THREE.Quaternion(); \n        this.fSteer = new THREE.Vector3(0, 0, 0);\n        this.vDesired = new THREE.Vector3(0, 0, 0); \n        \n        // Helper vectors. \n        this.sumVec = new THREE.Vector3(0, 0, 0);\n        this.diffVec = new THREE.Vector3(0, 0, 0); \n\n        // Force and speeds. \n        this.maxForce = 0.01; \n        this.maxSpeed = this.getRandomArbitrary(0.015, 0.025); \n        this.maxSlowDownSpeed = 0; \n\n        // Tolerances\n        this.slowDownTolerance = 0.2 * 0.2; \n        this.arriveTolerance = 0.01 * 0.01; \n        this.smoothFactor = 0.01; // Velocity smoothing.\n\n        // Target value that changes based on the pattern position. \n        this.target = new THREE.Vector3(0, 0, 0); \n    }\n\n    updateAgent(nAgents) {\n        this.seekTarget(); \n        this.flock(nAgents); \n        this.updatePosition();\n    }\n\n    seekTarget() {\n        this.seek(); // Calculate the force required to seek the target position. \n        this.applyForce(); // Apply the force. \n    }\n\n    flock(nAgents) {\n        if (nAgents.length > 0) {\n            this.seperation(nAgents); \n            this.applyForce(); \n\n            this.cohesion(nAgents);\n            this.applyForce();\n\n            this.align(nAgents);\n            this.applyForce();\n        }\n    }\n\n    updatePosition() {\n        // Target velocity. \n        this.sumVec.addVectors(this.velocity, this.acceleration); \n        \n        // What's my intermediate velocity? \n        // Lerp the velocity rather than just updating straight up.\n        this.velocity = this.velocity.lerp(this.sumVec, this.smoothFactor); \n        this.velocity.clampLength(-9999, this.maxSpeed); \n\n        this.position.add(this.velocity); \n        this.acceleration.multiplyScalar(0); \n    }\n\n    applyForce() {\n        // Add steering force to acceleration to change the position of the agent. \n        this.acceleration.add(this.fSteer); \n    }\n\n    seek() {\n        // Calculate desired velocity. \n        this.vDesired.subVectors(this.target, this.position); \n        this.vDesired.normalize();\n\n        let d = this.vDesired.lengthSq(); \n        if (d < this.slowDownTolerance && d > this.arriveTolerance) {\n            let newMaxSpeed = Utility.map_range(d, this.slowDownTolerance, this.arriveTolerance, this.maxSpeed, this.maxSlowDownSpeed); \n            this.vDesired.multiplyScalar(newMaxSpeed); \n        } else {\n            this.vDesired.multiplyScalar(this.maxSpeed); \n        }\n\n        // Calculate steering force.\n        this.fSteer.subVectors(this.vDesired, this.velocity); \n        this.fSteer.clampLength(-99999, this.maxForce); \n    }\n\n    seperation(nAgents) {\n        this.fSteer.set(0, 0, 0); \n        this.sumVec.set(0, 0, 0); \n\n        if (nAgents.length > 0) {\n            nAgents.forEach(n => {\n                this.diffVec.subVectors(this.position, n.position); \n                this.diffVec.normalize(); \n                this.diffVec.divideScalar(this.diffVec.length());  // Weight the vector properly based on the distance from the target. \n                this.sumVec.add(this.diffVec); \n            });\n            \n            // Calculate desired force using the average desired velocity \n            this.sumVec.divideScalar(nAgents.length); \n            if (this.sumVec.lengthSq() > 0) {\n                this.sumVec.normalize(); \n                this.sumVec.clampLength(-99999, this.maxSpeed);\n                this.fSteer.subVectors(this.sumVec, this.velocity);\n                this.fSteer.clampLength(-99999, this.maxForce); \n                this.fSteer.multiplyScalar(FLOCKING_WEIGHTS.SEPERATION); // Apply seperation weight. \n            }\n        }\n    }\n\n    cohesion(nAgents) {\n        this.target.set(0, 0, 0); \n        this.fSteer.set(0, 0, 0); \n\n        if (nAgents.length > 0) {\n            nAgents.forEach(n => {\n                this.target.add(n.position); \n            }); \n\n            this.target.divideScalar(nAgents.length); \n            this.seek(); // Seek the new target\n            this.fSteer.multiplyScalar(FLOCKING_WEIGHTS.COHESION); \n        }\n    }\n\n    align(nAgents) {\n        this.fSteer.set(0, 0, 0); \n\n        if (nAgents.length > 0) {\n            nAgents.forEach(a => {\n                this.fSteer.add(a.velocity); \n            }); \n        \n            this.fSteer.divideScalar(nAgents.length); \n            this.fSteer.normalize(); \n            this.fSteer.multiplyScalar(this.maxSpeed); \n            this.fSteer.sub(this.velocity); \n            this.fSteer.clampLength(-99999, this.maxForce); \n            this.fSteer.multiplyScalar(FLOCKING_WEIGHTS.ALIGNMENT); // Apply alignment weight. \n        }\n    }\n\n    setTarget(targetPos) {\n        this.target.copy(targetPos);\n    }\n    \n    getRandomArbitrary(min, max) {\n       return Math.random() * (max - min) + min;\n    }\n}","/*\r\n  Author: Amay Kataria\r\n  Date: 08/19/2021\r\n  Title: Pigeon.js\r\n  Description: Pigeon class that extends the agent class. It loads the bird model \r\n  and executes high level animations, etc. \r\n*/\r\n\r\nimport * as THREE from 'three'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'\r\nimport Agent from './Agent.js'\r\nimport model from '../models/Bird_simple.glb'; \r\nimport * as Utility from './Utility';\r\n\r\nconst loader = new GLTFLoader(); \r\n\r\nexport default class Pigeon extends Agent {\r\n    constructor(scene) {\r\n        super();\r\n        this.loadPigeon(scene); \r\n    }\r\n\r\n    loadPigeon(scene) {\r\n        loader.load(model, gltf => {\r\n            this.pigeon = gltf.scene; \r\n            \r\n            // Agent is the parent object under which pigeon sits. \r\n            this.parent = new THREE.Group();\r\n            this.parent.add(this.pigeon); \r\n            this.parent.frustumCulled = false;\r\n            this.parent.castShadow = true;\r\n            this.parent.receiveShadow = true; \r\n\r\n            // Store all the parameters that we'll be changing for this agent. \r\n            this.agentPosition = this.parent.position; \r\n            this.agentRotation = this.parent.rotation; \r\n            this.agentScale = this.parent.scale\r\n            this.agentAnimations = gltf.animations; \r\n\r\n            this.agentScale.set(0.25, 0.25, 0.25);\r\n\r\n            // Setup animation. \r\n            this.animationMixer = new THREE.AnimationMixer(this.parent); \r\n            var action = this.animationMixer.clipAction(this.agentAnimations[0]);\r\n            action.play(); \r\n\r\n            // Add it to the scene. \r\n            scene.add(this.parent); \r\n        }, undefined, function ( error ) {\r\n            console.error(error);\r\n        }); \r\n    }\r\n\r\n    update(delta, nAgents) {\r\n        // Animation update. \r\n        if (this.animationMixer) {\r\n            this.animationMixer.update(delta);\r\n\r\n            // Behaviors. \r\n            this.updateAgent(nAgents);  \r\n\r\n            // Sync rotation and position. \r\n            this.syncPosition();\r\n            this.syncRotation(); \r\n        }\r\n    }\r\n\r\n    syncPosition() {\r\n        // Sync position of the agent with \r\n        // the actual agent scene. \r\n        this.parent.position.copy(this.position);\r\n    }\r\n\r\n    syncRotation() {\r\n        // // Agent rotation.\r\n        let azimuth, inclination; \r\n        azimuth = Utility.azimuth(this.velocity); \r\n        inclination = Utility.inclination(this.velocity);\r\n\r\n        Utility.axisRotation(0, 1, 0, azimuth, this.rotationA); // Azimuth rotate around Z-axis\r\n        Utility.axisRotation(0, 0, 1, inclination - Math.PI/2, this.rotationB); // Inclination rotate X-axis\r\n                    \r\n        this.rotationA.multiply(this.rotationB);\r\n        this.parent.setRotationFromQuaternion(this.rotationA);\r\n    }\r\n}\r\n\r\n\r\n","import * as THREE from 'three';\n\nexport default class Target {\n    constructor(scene) {\n        let geometry = new THREE.SphereGeometry(0.2, 15, 15);\n        let material = new THREE.MeshLambertMaterial({color: new THREE.Color(1, 0, 0), wireframe: false}); \n        this.mesh = new THREE.Mesh(geometry, material);\n\n        scene.add(this.mesh);\n    }\n\n    getVector() {\n        return this.mesh.position; \n    }\n\n    setVector(v) {\n        this.mesh.position.copy(v);\n    }\n\n    setVisibility(v) {\n        this.mesh.visible = v;\n    }\n}","\r\n/*\r\n  Author: Amay Kataria\r\n  Date: 09/13/2021\r\n  Title: OctreeManager.js\r\n  Description: Octree is a tree data structure where each parent can have uptill 8 children.\r\n  We use this data structure to improve the performance of the flock. Now, every agent doesn't \r\n  have to test against every other agent. This data structure helps keep a list of neighbors for each\r\n  agent. \r\n*/\r\n\r\nimport { Vector3 } from 'math-ds';\r\nimport { PointOctree } from 'sparse-octree'; \r\n\r\nconst BIAS = 0.0; // No loose octree. \r\nconst MAX_POINTS = 2.0; // Maximum points before the tree splits. \r\nexport class Octree {\r\n    constructor(origin, boundary) {\r\n        let min = new Vector3(0, 0, 0);\r\n        let max = new Vector3(0, 0, 0);\r\n\r\n        min.x = origin.x - boundary; \r\n        min.y = origin.y - boundary; \r\n        min.z = origin.z - boundary; \r\n\r\n        max.x = origin.x + boundary; \r\n        max.y = origin.y + boundary; \r\n        max.z = origin.z + boundary;\r\n\r\n        this.tree = new PointOctree(min, max, BIAS, MAX_POINTS); \r\n    }\r\n\r\n    // Insert a point into the octree along with the data that should be retried. \r\n    insertPoint(position, agent) {\r\n        this.tree.insert(position, agent); \r\n    }\r\n\r\n    // Finds all the points in the octree within a given radius. \r\n    scanForPoints(position, radius) {\r\n        return this.tree.findPoints(position, radius, true); \r\n    }\r\n\r\n    pointCount() {\r\n        return this.tree.pointCount; \r\n    } \r\n}\r\n\r\nconst OCTREE_HOOD_BOUNDARY = 20; \r\nconst NEIGHBOUR_RADIUS = 5; // Radius from the origin.\r\nexport class OctreeManager {\r\n    constructor() {\r\n        this.flockOctree = {};\r\n    }\r\n\r\n    update(flockTarget, liarbirds) {\r\n        this.setupOctree(flockTarget, liarbirds); \r\n    }\r\n\r\n    setupOctree(flockTarget, liarbirds) {\r\n        this.flockOctree = new Octree(flockTarget, OCTREE_HOOD_BOUNDARY); \r\n        liarbirds.forEach(l => {\r\n            this.flockOctree.insertPoint(l.position, l); \r\n        }); \r\n    }\r\n\r\n    // Neighbours around a point. \r\n    getNeighbours(origin) {\r\n        let neighbours; let nAgents=[]; \r\n        neighbours = this.flockOctree.scanForPoints(origin, NEIGHBOUR_RADIUS);\r\n        neighbours.forEach(n => {\r\n            let a = n['data']; \r\n            nAgents.push(a); \r\n        }); \r\n        return nAgents; \r\n    }\r\n}\r\n\r\n          ","/*\n  Name: World.js\n  Author: Amay Kataria\n  Date: 08/19/2021\n  Description: This is where Three.js world is initialized. It's the entry point for the three-dimensional \n  world and creating all elements. \n*/\n\nimport React from 'react'\nimport Radium from 'radium'\nimport * as THREE from 'three'\nimport oc from 'three-orbit-controls'\nimport Stats from 'stats.js'\nimport * as dat from 'dat.gui'\nimport Pigeon from './Pigeon.js'\nimport Target from './Target.js'\nimport {EllipsePattern, ellipseConstructor} from './PatternManager'\nimport { OctreeManager } from './OctreeManager.js'\n\nconst OrbitControls = oc(THREE); \n\nexport const WORLD_STATE = {\n  PATTERN: 0,\n  FLOCK: 1\n}; \nconst NUM_PIGEONS = 50; \n\nconst styles = {\n  container: {\n      // position: 'absolute',\n      zIndex: 0,\n      top: '0%',\n      overflowX: 'hidden',\n      overflowY: 'auto'\n  }\n};\n\n// Gui Parameters. \nconst guiParams = {\n  showGrid: true,\n  showTarget: true\n};\n\nclass World extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state={};\n\n    // Pointer to the div that holds the Three.js world.\n    this.ref = React.createRef(); \n    \n    // 3D scene object where everything is added. \n    this.scene = new THREE.Scene(); \n\n    // Static setup that can happen after scene is initialized. \n    this.setupCamera();  \n    this.setupProps(); \n    this.setupGui(); \n    this.setupLighting();\n    this.setupRenderer(); \n    this.setupOrbitControls(); \n\n    // Create the target object. \n    this.target = new Target(this.scene);\n\n    // Other helpers. \n    this.stats = new Stats(); \n    this.clock = new THREE.Clock(); \n\n    this.setupPattern();\n    this.octreeManager = new OctreeManager();\n    \n    this.pigeons = []; \n  }\n\n  componentDidMount() {\n    // Mount the canvas at the current div. \n    this.ref.current.appendChild(this.renderer.domElement); \n    this.ref.current.appendChild(this.stats.dom);\n\n    // Pigeon Geometry. \n    for (let i = 0; i < NUM_PIGEONS; i++) {\n      // Create these pigeons at random locations from each other\n      // But within some radius. \n      let p = new Pigeon(this.scene); \n      this.pigeons.push(p);\n    }\n\n    this.initThreeRender(); \n  }\n\n  // Called every animation frame. \n  update() {\n    // Update everything in here. \n    this.grid.visible = guiParams.showGrid;\n    this.target.setVisibility(guiParams.showTarget);\n\n    // Update agent and its position. \n    var delta = this.clock.getDelta(); \n\n    // Pattern's position. \n    this.ellipsePattern.update();\n    let patternPos = this.ellipsePattern.getTargetPos();\n\n    // Update octree. Note: On every update, we instantiate a new octree\n    // and populate it with the new pigeon position. So everytime, \n    // the neighbors get updated. \n    this.octreeManager.update(patternPos, this.pigeons); \n\n    let nAgents = []; // Neighboring agents. \n    this.pigeons.forEach(p => {\n      p.setTarget(patternPos); \n      nAgents = this.octreeManager.getNeighbours(p.position); \n      p.update(delta, nAgents); \n    });\n\n    // Set the target object's position. \n    this.target.setVector(patternPos);\n  }\n\n  // Render three.js world. \n  render() {\n    return (\n      <div style={styles.container} ref={this.ref} />\n    );\n  }\n\n  initThreeRender() {\n    // Render loop. \n    this.stats.begin();\n    this.update(); \n    this.controls.update();\n    this.renderer.render(this.scene, this.camera);\n    this.stats.end();\n\n    // Register this function as a callback to every repaint from the browser.\n    requestAnimationFrame(this.initThreeRender.bind(this)); \n  }\n\n  setupRenderer() {\n    // Core renderer. \n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    }); \n    this.renderer.setClearColor(0x118a1f, 1);    // Set renderer properties\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.outputEncoding = THREE.sRGBEncoding; \n  }\n\n  setupOrbitControls() {\n    this.controls = new OrbitControls(this.camera); \n    this.controls.enablePan = true;\n    // controls.autoRotate = true; \n    // controls.autoRotateSpeed = 0.1;\n    this.controls.enabled = true; \n    this.controls.enableKeys = true;\n  }\n\n  setupCamera() {\n    // Camera Setup\n    // (FOV, AspectRatio, Near Clipping, Far Clipping)\n    this.camera = new THREE.PerspectiveCamera(60, window.innerWidth/window.innerHeight, 0.05, 20000);\n    this.camera.position.set(4, 4, 4); \n    this.camera.lookAt(new THREE.Vector3(0, 0, 0));\n    this.camera.frustumCulled = false; \n  }\n\n  setupProps() {\n    let defaultHeight = 0.25; \n    // Things on the ground\n    for (let i = 0; i < 100; i++) {\n      const geometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n      const material = new THREE.MeshBasicMaterial( {color: 0x612C2C} );\n      const box = new THREE.Mesh(geometry, material);      \n      let r1 = this.getRandomArbitrary(-1, 1) * 8; \n      let r2 = this.getRandomArbitrary(-1, 1) * 8; \n      box.position.x = r1;\n      box.position.z = r2; \n      box.position.y = defaultHeight;\n      this.scene.add(box);\n    }\n\n    // Ground\n    const geometry = new THREE.PlaneGeometry(20, 20);\n    const material = new THREE.MeshBasicMaterial( {color: 0x52D764, side: THREE.DoubleSide} );\n    const plane = new THREE.Mesh(geometry, material); \n    plane.rotation.x = Math.PI/2;\n    this.scene.add(plane);\n\n    this.scene.add(new THREE.AxesHelper(30));\n    // Definitely need the grid helper. \n    this.grid = new THREE.GridHelper(30, 10);\n    this.scene.add(this.grid);\n  }\n\n  setupLighting() {\n    // -------- Lighting ----------------\n    var ambientLight = new THREE.AmbientLight(0xD7D3D3);\n    ambientLight.intensity = 1.5;\n    var directionalLight = new THREE.DirectionalLight(0xffffff);\n    directionalLight.intensity = 3.0;\n    directionalLight.position.set(0, 50, 50).normalize();\n    this.scene.add(ambientLight);\n    this.scene.add(directionalLight);\t\n  }\n\n  setupGui() {\n    this.gui = new dat.GUI();\n    this.gui.add(guiParams, 'showGrid' ).name('Show Grid');\n    this.gui.add(guiParams, 'showTarget').name('Show Target');\n  }\n\n  getRandomArbitrary(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n\n  \n  setupPattern() {\n    let pos = new THREE.Vector3(0, 6, 0); // Target position\n    let radX = 10; \n    let radZ = 10;\n    let amp = 0; \n    let dir = true; \n    let moveFactor = THREE.Math.degToRad(0.3); \n    let patternObj = ellipseConstructor(pos, radX, radZ, amp, dir, moveFactor); \n    this.ellipsePattern = new EllipsePattern(patternObj); \n  }\n\n  updatePattern() {\n      this.ellipsePattern.update(); \n      // let patternPos = this.ellipsePattern.getTargetPos();\n      // this.target.copy(patternPos);\n  }\n}\n\nexport default Radium(World);","/*\n  Name: App.js\n  Author: Amay Kataria\n  Date: 08/19/2021\n  Description: Entry point for the application.\n*/\n\nimport React from 'react'\nimport Radium from 'radium'\nimport World from './World.js'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state={\n    };\n\n    this.totalRef = React.createRef(); \n    this.worldRef = React.createRef(); \n  }\n\n  render() {\n    return (\n      <div>\n          <World ref={this.worldRef} />\n      </div>\n    );\n  }\n\n  componentDidUpdate() {\n    console.log(this.totalRef.current.scrollHeight);\n  }\n}\n\nexport default Radium(App);\n\n// Some logic to realign the height of the world. \n// setTimeout(() => {\n//   // let totalHeight = this.totalRef.current.scrollHeight; \n//   // let totalHeight = 600; \n//   // this.worldRef.current.updateRendererHeight(totalHeight);\n//   // console.log(totalHeight);\n// }, 300); ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './font/stylesheet.css';\nimport App from './components/App';\nimport {StyleRoot} from 'radium'\n\n// Use StyleRoot to enable keyframes and media queries for Javascript type\n// styles with Radium in components. \n// Single render function for the entire application. \nReactDOM.render(<StyleRoot><App /></StyleRoot>, document.getElementById('root'));"],"sourceRoot":""}