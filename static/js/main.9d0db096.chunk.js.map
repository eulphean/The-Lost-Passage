{"version":3,"sources":["components/Utility.js","components/Agent.js","components/Pigeon.js","components/Target.js","components/Terrain.js","components/PatternManager.js","components/OctreeManager.js","components/CameraControl.js","components/World.js","components/Websocket.js","components/ServerGui.js","components/App.js","index.js","models/Bird_simple.glb","models/world.glb"],"names":["axisRotation","axis_x","axis_y","axis_z","angle_radians","q","norm","Math","sqrt","cos","sin","set","AgentParams","MaxForce","SmoothFactor","SeperationForce","CohesionForce","AlignmentForce","Agent","this","position","THREE","random","velocity","acceleration","rotationA","rotationB","fSteer","vDesired","sumVec","diffVec","maxSpeed","getRandomArbitrary","maxSlowDownSpeed","slowDownTolerance","arriveTolerance","target","nAgents","seekTarget","flock","updatePosition","seek","applyForce","length","seperation","cohesion","align","addVectors","lerp","clampLength","add","multiplyScalar","subVectors","normalize","value","low1","high1","low2","high2","d","lengthSq","newMaxSpeed","forEach","n","divideScalar","a","sub","targetPos","copy","min","max","loader","GLTFLoader","Pigeon","scene","loadPigeon","load","model","gltf","pigeon","parent","frustumCulled","castShadow","receiveShadow","agentPosition","agentRotation","rotation","agentScale","scale","agentAnimations","animations","animationMixer","clipAction","play","undefined","error","console","delta","update","updateAgent","syncPosition","syncRotation","azimuth","inclination","v","atan2","x","z","acos","y","Utility","PI","multiply","setRotationFromQuaternion","Target","geometry","material","color","wireframe","mesh","visible","Terrain","loadTerrain","terrain","terrainPosition","terrainRotation","terrainScale","EllipseParams","originPosX","originPosY","originPosZ","radiusX","radiusZ","amplitude","speed","isClockwise","Pattern","patternObj","theta_rad","amp","dir","originPos","pos","moveFactor","move","maxTheta","r","EllipsePattern","radX","radx","radZ","radz","ellipseParams","setGuiParams","xPos","cartesianX","zPos","cartesianZ","yPos","cartesianY","updateTheta","degToRad","Octree","origin","boundary","Vector3","tree","PointOctree","agent","insert","radius","findPoints","pointCount","OctreeManager","flockOctree","flockTarget","liarbirds","setupOctree","l","insertPoint","scanForPoints","push","OrbitControls","oc","OrbitParams","EnableControls","EnablePan","AutoRotate","RotateSpeed","EnableKeys","CameraControl","camera","window","innerWidth","innerHeight","lookAt","controls","updateControls","enablePan","autoRotate","autoRotateSpeed","enabled","enableKeys","styles","container","zIndex","top","overflowX","overflowY","WorldParams","ShowGrid","ShowTarget","World","props","state","ref","React","createRef","setupProps","setupLighting","setupRenderer","cameraControl","stats","Stats","clock","setupPattern","octreeManager","pigeons","current","appendChild","renderer","domElement","dom","i","p","initThreeRender","addEventListener","onMouseMove","bind","grid","setVisibility","getDelta","ellipsePattern","patternPos","getTargetPos","setTarget","getNeighbours","setVector","style","begin","render","getCamera","end","requestAnimationFrame","antialias","setClearColor","setSize","setPixelRatio","devicePixelRatio","outputEncoding","intensity","directionalLight","ellipseConstructor","event","gui","getSaveObject","log","Component","Radium","siteURL","herokuURL","socket","io","reconnection","reconnectionDelay","reconnectionAttempts","Infinity","once","subscribe","handlePresetsCbk","on","logTime","handlePresets","data","presetName","json","payload","emit","readPresetsCallback","GuiParams","Preset","Presets","ServerGui","Pane","title","addInput","presetOptions","buildPresets","f0","addFolder","expanded","label","f1","f2","step","addButton","onSavePreset","onDeletePreset","Websocket","readAllPresets","onReceivePresets","guiJson","JSON","parse","importPreset","name","config","text","stringify","defaultPresetJSON","disposePresets","exportPreset","preset","_","find","sortBy","unshift","saveGuiPreset","alert","remove","deletePreset","presetJson","presetList","dispose","index","options","onPresetSelected","App","totalRef","worldRef","scrollHeight","ReactDOM","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.9d0db096.chunk.js","sourcesContent":["const getRandomNum = (max = 0, min = 0) => {\n    return Math.floor(Math.random() * (max + 1 - min)) + min;\n}\n\nconst map_range = (value, low1, high1, low2, high2) => {\n    return low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n}\n\nconst azimuth = (v) => {\n    return Math.atan2(v.x, v.z);\n}\n\nconst inclination = (v) => {\n    return Math.acos(v.y / v.length());\n}\n\nconst axisRotation = (axis_x, axis_y, axis_z, angle_radians, q) => {\n    var norm = Math.sqrt(axis_x * axis_x + axis_y * axis_y + axis_z * axis_z);\n    axis_x /= norm;\n    axis_y /= norm;\n    axis_z /= norm;\n    var cos = Math.cos(angle_radians / 2);\n    var sin = Math.sin(angle_radians / 2);\n    q.set(axis_x * sin, axis_y * sin, axis_z * sin, cos); \n}\n\nexport {\n    getRandomNum,\n    map_range,\n    azimuth,\n    inclination,\n    axisRotation\n}","import * as THREE from 'three'\nimport threeOrbitControls from 'three-orbit-controls';\nimport * as Utility from './Utility'\n\nexport let AgentParams = {\n    MaxForce: 0.01,\n    SmoothFactor: 0.01,\n    SeperationForce: 1.2,\n    CohesionForce: 0.5,\n    AlignmentForce: 0.2\n}\n\nexport default class Agent {\n    constructor() {\n        // this.idx = i; \n        // // Construct all important variables. \n        this.position = new THREE.Vector3(Math.random() * 20, 2, 0); \n        this.velocity = new THREE.Vector3(0.1, 0.1, 0.1); \n        this.acceleration = new THREE.Vector3(0, 0, 0); \n        this.rotationA = new THREE.Quaternion(); \n        this.rotationB = new THREE.Quaternion(); \n        this.fSteer = new THREE.Vector3(0, 0, 0);\n        this.vDesired = new THREE.Vector3(0, 0, 0); \n        \n        // Helper vectors. \n        this.sumVec = new THREE.Vector3(0, 0, 0);\n        this.diffVec = new THREE.Vector3(0, 0, 0); \n\n        // Force and speeds. \n        this.maxSpeed = this.getRandomArbitrary(0.015, 0.050); \n        this.maxSlowDownSpeed = 0; \n\n        // Tolerances\n        this.slowDownTolerance = 0.2 * 0.2; \n        this.arriveTolerance = 0.01 * 0.01; \n\n        // Target value that changes based on the pattern position. \n        this.target = new THREE.Vector3(0, 0, 0); \n    }\n\n    updateAgent(nAgents) {\n        this.seekTarget(); \n        this.flock(nAgents); \n        this.updatePosition();\n    }\n\n    seekTarget() {\n        this.seek(); // Calculate the force required to seek the target position. \n        this.applyForce(); // Apply the force. \n    }\n\n    flock(nAgents) {\n        if (nAgents.length > 0) {\n            this.seperation(nAgents); \n            this.applyForce(); \n\n            this.cohesion(nAgents);\n            this.applyForce();\n\n            this.align(nAgents);\n            this.applyForce();\n        }\n    }\n\n    updatePosition() {\n        // Target velocity. \n        this.sumVec.addVectors(this.velocity, this.acceleration); \n        \n        // What's my intermediate velocity? \n        // Lerp the velocity rather than just updating straight up.\n        this.velocity = this.velocity.lerp(this.sumVec, AgentParams.SmoothFactor); \n        this.velocity.clampLength(-9999, this.maxSpeed); \n\n        this.position.add(this.velocity); \n        this.acceleration.multiplyScalar(0); \n    }\n\n    applyForce() {\n        // Add steering force to acceleration to change the position of the agent. \n        this.acceleration.add(this.fSteer); \n    }\n\n    seek() {\n        // Calculate desired velocity. \n        this.vDesired.subVectors(this.target, this.position); \n        this.vDesired.normalize();\n\n        let d = this.vDesired.lengthSq(); \n        if (d < this.slowDownTolerance && d > this.arriveTolerance) {\n            let newMaxSpeed = Utility.map_range(d, this.slowDownTolerance, this.arriveTolerance, this.maxSpeed, this.maxSlowDownSpeed); \n            this.vDesired.multiplyScalar(newMaxSpeed); \n        } else {\n            this.vDesired.multiplyScalar(this.maxSpeed); \n        }\n\n        // Calculate steering force.\n        this.fSteer.subVectors(this.vDesired, this.velocity); \n        this.fSteer.clampLength(-99999, AgentParams.MaxForce); \n    }\n\n    seperation(nAgents) {\n        this.fSteer.set(0, 0, 0); \n        this.sumVec.set(0, 0, 0); \n\n        if (nAgents.length > 0) {\n            nAgents.forEach(n => {\n                this.diffVec.subVectors(this.position, n.position); \n                this.diffVec.normalize(); \n                this.diffVec.divideScalar(this.diffVec.length());  // Weight the vector properly based on the distance from the target. \n                this.sumVec.add(this.diffVec); \n            });\n            \n            // Calculate desired force using the average desired velocity \n            this.sumVec.divideScalar(nAgents.length); \n            if (this.sumVec.lengthSq() > 0) {\n                this.sumVec.normalize(); \n                this.sumVec.clampLength(-99999, this.maxSpeed);\n                this.fSteer.subVectors(this.sumVec, this.velocity);\n                this.fSteer.clampLength(-99999, AgentParams.MaxForce); \n                this.fSteer.multiplyScalar(AgentParams.SeperationForce); // Apply seperation weight. \n            }\n        }\n    }\n\n    cohesion(nAgents) {\n        this.target.set(0, 0, 0); \n        this.fSteer.set(0, 0, 0); \n\n        if (nAgents.length > 0) {\n            nAgents.forEach(n => {\n                this.target.add(n.position); \n            }); \n\n            this.target.divideScalar(nAgents.length); \n            this.seek(); // Seek the new target\n            this.fSteer.multiplyScalar(AgentParams.CohesionForce); \n        }\n    }\n\n    align(nAgents) {\n        this.fSteer.set(0, 0, 0); \n\n        if (nAgents.length > 0) {\n            nAgents.forEach(a => {\n                this.fSteer.add(a.velocity); \n            }); \n        \n            this.fSteer.divideScalar(nAgents.length); \n            this.fSteer.normalize(); \n            this.fSteer.multiplyScalar(this.maxSpeed); \n            this.fSteer.sub(this.velocity); \n            this.fSteer.clampLength(-99999, AgentParams.MaxForce); \n            this.fSteer.multiplyScalar(AgentParams.AlignmentForce); // Apply alignment weight. \n        }\n    }\n\n    setTarget(targetPos) {\n        this.target.copy(targetPos);\n    }\n    \n    getRandomArbitrary(min, max) {\n       return Math.random() * (max - min) + min;\n    }\n}","/*\r\n  Author: Amay Kataria\r\n  Date: 08/19/2021\r\n  Title: Pigeon.js\r\n  Description: Pigeon class that extends the agent class. It loads the bird model \r\n  and executes high level animations, etc. \r\n*/\r\n\r\nimport * as THREE from 'three'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'\r\nimport Agent, { agentParams } from './Agent.js'\r\nimport model from '../models/Bird_simple.glb'; \r\nimport * as Utility from './Utility';\r\n\r\nconst loader = new GLTFLoader(); \r\n\r\nexport default class Pigeon extends Agent {\r\n    constructor(scene) {\r\n        super();\r\n        this.loadPigeon(scene); \r\n    }\r\n\r\n    loadPigeon(scene) {\r\n        loader.load(model, gltf => {\r\n            this.pigeon = gltf.scene; \r\n            \r\n            // Agent is the parent object under which pigeon sits. \r\n            this.parent = new THREE.Group();\r\n            this.parent.add(this.pigeon); \r\n            this.parent.frustumCulled = false;\r\n            this.parent.castShadow = true;\r\n            this.parent.receiveShadow = true; \r\n\r\n            // Store all the parameters that we'll be changing for this agent. \r\n            this.agentPosition = this.parent.position; \r\n            this.agentRotation = this.parent.rotation; \r\n            this.agentScale = this.parent.scale\r\n            this.agentAnimations = gltf.animations; \r\n\r\n            this.agentScale.set(0.50, 0.50, 0.50);\r\n\r\n            // Setup animation. \r\n            this.animationMixer = new THREE.AnimationMixer(this.parent); \r\n            var action = this.animationMixer.clipAction(this.agentAnimations[0]);\r\n            action.play(); \r\n\r\n            // Add it to the scene. \r\n            scene.add(this.parent); \r\n        }, undefined, function ( error ) {\r\n            console.error(error);\r\n        }); \r\n    }\r\n\r\n    update(delta, nAgents) {\r\n        // Animation update. \r\n        if (this.animationMixer) {\r\n            this.animationMixer.update(delta);\r\n\r\n            // Behaviors. \r\n            this.updateAgent(nAgents);  \r\n\r\n            // Sync rotation and position. \r\n            this.syncPosition();\r\n            this.syncRotation(); \r\n        }\r\n    }\r\n\r\n    syncPosition() {\r\n        // Sync position of the agent with \r\n        // the actual agent scene. \r\n        this.parent.position.copy(this.position);\r\n    }\r\n\r\n    syncRotation() {\r\n        // // Agent rotation.\r\n        let azimuth, inclination; \r\n        azimuth = Utility.azimuth(this.velocity); \r\n        inclination = Utility.inclination(this.velocity);\r\n\r\n        Utility.axisRotation(0, 1, 0, azimuth, this.rotationA); // Azimuth rotate around Z-axis\r\n        Utility.axisRotation(0, 0, 1, inclination - Math.PI/2, this.rotationB); // Inclination rotate X-axis\r\n                    \r\n        this.rotationA.multiply(this.rotationB);\r\n        this.parent.setRotationFromQuaternion(this.rotationA);\r\n    }\r\n}\r\n\r\n\r\n","import * as THREE from 'three';\n\nexport default class Target {\n    constructor(scene) {\n        let geometry = new THREE.SphereGeometry(0.2, 15, 15);\n        let material = new THREE.MeshLambertMaterial({color: new THREE.Color(1, 0, 0), wireframe: false}); \n        this.mesh = new THREE.Mesh(geometry, material);\n\n        scene.add(this.mesh);\n    }\n\n    getVector() {\n        return this.mesh.position; \n    }\n\n    setVector(v) {\n        this.mesh.position.copy(v);\n    }\n\n    setVisibility(v) {\n        this.mesh.visible = v;\n    }\n}","/*\n  Author: Amay Kataria\n  Date: 09/16/2021\n  Title: Terrain.js\n  Description: A class responsible to load the static terrain. This the natural landscape that \n  we bring in from Blender. \n*/\n\nimport * as THREE from 'three'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'\nimport terrain from '../models/world.glb'; \nimport * as Utility from './Utility';\n\nconst loader = new GLTFLoader(); \n\nexport default class Terrain {\n    constructor(scene) {\n        this.loadTerrain(scene); \n    }\n\n    loadTerrain(scene) {\n        loader.load(terrain, gltf => {\n            this.terrain = gltf.scene; \n            \n            // Agent is the parent object under which pigeon sits. \n            this.parent = new THREE.Group();\n            this.parent.add(this.terrain); \n            this.parent.frustumCulled = false;\n            this.parent.castShadow = true;\n            this.parent.receiveShadow = true; \n\n            // Store all the parameters that we'll be changing for this agent. \n            this.terrainPosition = this.parent.position; \n            this.terrainRotation = this.parent.rotation; \n            this.terrainScale = this.parent.scale\n\n            this.terrainScale.set(50, 50, 50);\n\n            // Add it to the scene. \n            scene.add(this.parent); \n        }, undefined, function ( error ) {\n            console.error(error);\n        }); \n    }\n\n    getMesh() {\n        return this.parent;\n    }\n}\n\n\n","/*\n  Name: PatternManager.js\n  Author: Amay Kataria\n  Date: 09/21/2021\n  Description: A class that holds two different patterns for birds. These are configured using \n  two param objects that are exposed in the GUI. \n*/\n\nimport * as THREE from 'three'\n\nexport let EllipseParams = {\n    originPosX: 0,\n    originPosY: 6, \n    originPosZ: 0,\n    radiusX: 10,\n    radiusZ:  10,\n    amplitude: 0,\n    speed: 0.3, \n    isClockwise: true\n}  \n\nclass Pattern {\n    constructor(patternObj) {\n        this.theta_rad = 0; \n        this.amp = patternObj.amp;  \n        this.isClockwise = patternObj.dir; \n        this.originPos = patternObj.pos; \n        this.moveFactor = patternObj.move; \n        this.targetPos = new THREE.Vector3(0, 0, 0); // Agents follow this target. \n    }\n\n    updateTheta(maxTheta) {\n        // Update theta based on direction. \n        this.theta_rad = this.isClockwise ? \n            this.theta_rad + this.moveFactor : \n            this.theta_rad - this.moveFactor; \n\n        // Reset theta. \n        this.theta_rad = this.theta_rad >= maxTheta ? 0 : this.theta_rad;\n    }\n\n    cartesianX(r) {\n        return this.originPos.x + r * Math.cos(this.theta_rad);\n    }\n\n    cartesianZ(r) {\n        return this.originPos.z + r * Math.sin(this.theta_rad);\n    }\n    \n    cartesianY(r) {\n        return this.originPos.y + this.amp * Math.sin(this.theta_rad);\n    }\n\n    getTargetPos() {\n        return this.targetPos; \n    }\n\n    // Debug Only \n    // To see where we're at. \n    syncPatternObj() {\n        // SparkUtility.syncSceneObject(this.originObj, this.targetPos); \n    }\n}\n\nexport const ellipseConstructor = (originPos, radX, radZ, amplitude, isClockwise, moveFactor) => {\n    return {\n        pos: originPos, // C\n        radx: radX,\n        radz: radZ,\n        amp: amplitude, // C\n        dir: isClockwise, // C\n        move: moveFactor // C\n    }; \n}\n\nexport class EllipsePattern extends Pattern {\n    constructor(patternObj) {\n        super(patternObj); \n        this.radX = patternObj.radx; \n        this.radZ = patternObj.radz; \n        this.maxTheta = 2*Math.PI; \n    }\n\n    update(ellipseParams) {\n        this.setGuiParams(ellipseParams); \n\n        // Ellipse: Cartesian coordinates. \n        let xPos = this.cartesianX(this.radX); // Defines polar curve. \n        let zPos = this.cartesianZ(this.radZ); // Define polar curve. \n        let yPos = this.cartesianY(); // Defines height. \n        this.targetPos.set(xPos, yPos, zPos); \n\n        this.updateTheta(this.maxTheta); \n    }\n\n    setGuiParams(ellipseParams) {\n        this.originPos.set(ellipseParams.originPosX, ellipseParams.originPosY, ellipseParams.originPosZ);\n        this.radX = ellipseParams.radiusX;\n        this.radZ = ellipseParams.radiusZ;\n        this.amp = ellipseParams.amplitude; \n        this.moveFactor = THREE.Math.degToRad(ellipseParams.speed); \n        this.isClockwise = ellipseParams.isClockwise; \n    }   \n}\n\nexport const roseConstructor = (originPos, radius, phase, numPetals, amplitude, isSinusoidal, isClockwise, moveFactor) => {\n    return {\n        pos: originPos, // C\n        rad: radius,\n        ph: phase, \n        numP: numPetals,\n        amp: amplitude, // C\n        isSin: isSinusoidal,\n        dir: isClockwise, // C\n        move: moveFactor // C\n    }\n}\n\n// r = asin(b + cTheta); \n// r = acos(b + cTheta); \n// a = radius\n// b = phase\n// c = numPetals\nexport class RosePattern extends Pattern {\n    constructor(patternObj) {\n        super(patternObj); \n        this.rad = patternObj.rad; \n        this.phase = patternObj.ph; \n        this.numPetals = patternObj.numP;\n        this.isSin = patternObj.isSin; \n        this.maxTheta = Math.PI; \n    }\n\n    update() {\n        let xPos, yPos, zPos; \n        let r = this.isSin ? this.rad * Math.sin(this.phase + this.numPetals * this.theta_rad) : \n            this.rad * Math.cos(this.phase + this.numPetals * this.theta_rad)\n\n        xPos = this.cartesianX(r); // Defines polar curve. \n        zPos = this.cartesianZ(r); // Defines polar curve. \n        yPos = this.cartesianY(); // Defines height. \n\n        this.targetPos.set(xPos, yPos, zPos); \n\n        this.updateTheta(this.maxTheta);\n    }\n}","\r\n/*\r\n  Author: Amay Kataria\r\n  Date: 09/13/2021\r\n  Title: OctreeManager.js\r\n  Description: Octree is a tree data structure where each parent can have uptill 8 children.\r\n  We use this data structure to improve the performance of the flock. Now, every agent doesn't \r\n  have to test against every other agent. This data structure helps keep a list of neighbors for each\r\n  agent. \r\n*/\r\n\r\nimport { Vector3 } from 'math-ds';\r\nimport { PointOctree } from 'sparse-octree'; \r\n\r\nconst BIAS = 0.0; // No loose octree. \r\nconst MAX_POINTS = 2.0; // Maximum points before the tree splits. \r\nexport class Octree {\r\n    constructor(origin, boundary) {\r\n        let min = new Vector3(0, 0, 0);\r\n        let max = new Vector3(0, 0, 0);\r\n\r\n        min.x = origin.x - boundary; \r\n        min.y = origin.y - boundary; \r\n        min.z = origin.z - boundary; \r\n\r\n        max.x = origin.x + boundary; \r\n        max.y = origin.y + boundary; \r\n        max.z = origin.z + boundary;\r\n\r\n        this.tree = new PointOctree(min, max, BIAS, MAX_POINTS); \r\n    }\r\n\r\n    // Insert a point into the octree along with the data that should be retried. \r\n    insertPoint(position, agent) {\r\n        this.tree.insert(position, agent); \r\n    }\r\n\r\n    // Finds all the points in the octree within a given radius. \r\n    scanForPoints(position, radius) {\r\n        return this.tree.findPoints(position, radius, true); \r\n    }\r\n\r\n    pointCount() {\r\n        return this.tree.pointCount; \r\n    } \r\n}\r\n\r\nconst OCTREE_HOOD_BOUNDARY = 20; \r\nconst NEIGHBOUR_RADIUS = 5; // Radius from the origin.\r\nexport class OctreeManager {\r\n    constructor() {\r\n        this.flockOctree = {};\r\n    }\r\n\r\n    update(flockTarget, liarbirds) {\r\n        this.setupOctree(flockTarget, liarbirds); \r\n    }\r\n\r\n    setupOctree(flockTarget, liarbirds) {\r\n        this.flockOctree = new Octree(flockTarget, OCTREE_HOOD_BOUNDARY); \r\n        liarbirds.forEach(l => {\r\n            this.flockOctree.insertPoint(l.position, l); \r\n        }); \r\n    }\r\n\r\n    // Neighbours around a point. \r\n    getNeighbours(origin) {\r\n        let neighbours; let nAgents=[]; \r\n        neighbours = this.flockOctree.scanForPoints(origin, NEIGHBOUR_RADIUS);\r\n        neighbours.forEach(n => {\r\n            let a = n['data']; \r\n            nAgents.push(a); \r\n        }); \r\n        return nAgents; \r\n    }\r\n}\r\n\r\n          ","/*\r\n  Name: CameraControl.js\r\n  Author: Amay Kataria\r\n  Date: 09/24/2021\r\n  Description: A module that handles camera and user interaction component.\r\n*/\r\n\r\nimport * as THREE from 'three'\r\nimport oc from 'three-orbit-controls'\r\n\r\nconst OrbitControls = oc(THREE); \r\n\r\nexport let OrbitParams = {\r\n    EnableControls: false,\r\n    EnablePan: true,\r\n    AutoRotate: false,\r\n    RotateSpeed: 0.1, \r\n    EnableKeys: true\r\n};\r\n\r\nclass CameraControl {\r\n    constructor() {\r\n        // Camera Setup\r\n        // (FOV, AspectRatio, Near Clipping, Far Clipping)\r\n        this.camera = new THREE.PerspectiveCamera(60, window.innerWidth/window.innerHeight, 0.05, 20000);\r\n        this.camera.position.set(4, 4, 4); \r\n        this.camera.lookAt(new THREE.Vector3(0, 0, 0));\r\n        this.camera.frustumCulled = false; \r\n\r\n        this.controls = new OrbitControls(this.camera); \r\n    }\r\n\r\n    update() {\r\n        this.updateControls();\r\n    }\r\n\r\n    updateControls() {\r\n        this.controls.update();\r\n        this.controls.enablePan = OrbitParams.EnablePan;\r\n        this.controls.autoRotate = OrbitParams.AutoRotate; \r\n        this.controls.autoRotateSpeed = OrbitParams.RotateSpeed;\r\n        this.controls.enabled = OrbitParams.EnableControls; \r\n        this.controls.enableKeys = OrbitParams.EnableKeys;\r\n    }\r\n\r\n    getCamera() {\r\n        return this.camera;\r\n    }\r\n} \r\n\r\n// Keep a singleton instance of this - through App.js\r\nexport default CameraControl;","/*\n  Name: World.js\n  Author: Amay Kataria\n  Date: 08/19/2021\n  Description: This is where Three.js world is initialized. It's the entry point for the three-dimensional \n  world and creating all elements. \n*/\n\nimport React from 'react'\nimport Radium from 'radium'\nimport * as THREE from 'three'\nimport Stats from 'stats.js'\nimport Pigeon from './Pigeon.js'\nimport Target from './Target.js'\nimport Terrain from './Terrain.js'\nimport {EllipseParams as ellipseParams, EllipsePattern, ellipseConstructor} from './PatternManager'\nimport { OctreeManager } from './OctreeManager.js'\nimport CameraControl from './CameraControl.js'\n\nconst Raycaster = new THREE.Raycaster();\nconst mouse = new THREE.Vector2(); \n\nconst NUM_PIGEONS = 50; \n\nconst styles = {\n  container: {\n      // position: 'absolute',\n      zIndex: 0,\n      top: '0%',\n      overflowX: 'hidden',\n      overflowY: 'auto'\n  }\n};\n\n// GUI Params local to this component.\nexport let WorldParams = {\n  ShowGrid: true,\n  ShowTarget: true\n};\n\n\nclass World extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state={};\n\n    // Pointer to the div that holds the Three.js world.\n    this.ref = React.createRef(); \n    \n    // 3D scene object where everything is added. \n    this.scene = new THREE.Scene(); \n\n    // Static setup that can happen after scene is initialized.  \n    this.setupProps(); \n    this.setupLighting();\n    this.setupRenderer(); \n\n    // Camera & Interactive controls module. \n    this.cameraControl = new CameraControl(); \n\n    // Create the target object. \n    this.target = new Target(this.scene);\n\n    // Other helpers. \n    this.stats = new Stats(); \n    this.clock = new THREE.Clock(); \n\n    this.setupPattern();\n    this.octreeManager = new OctreeManager();\n    \n    this.pigeons = []; \n  }\n\n  componentDidMount() {\n    // Mount the canvas at the current div. \n    this.ref.current.appendChild(this.renderer.domElement); \n    this.ref.current.appendChild(this.stats.dom);\n\n    // Pigeon Geometry. \n    for (let i = 0; i < NUM_PIGEONS; i++) {\n      // Create these pigeons at random locations from each other\n      let p = new Pigeon(this.scene); \n      this.pigeons.push(p);\n    }\n\n    // Initialize the renderer. \n    this.initThreeRender(); \n\n    window.addEventListener('mousemove', this.onMouseMove.bind(this), false);\n    //window.addEventListener('click', this.onClick.bind(this), true)\n  }\n\n  // Called every animation frame. \n  update() {\n    // Update everything in here. \n    this.grid.visible = WorldParams.ShowGrid;\n    this.target.setVisibility(WorldParams.ShowTarget);\n\n    // Update agent and its position. \n    var delta = this.clock.getDelta(); \n\n    // Pattern's position. \n    this.ellipsePattern.update(ellipseParams);\n    let patternPos = this.ellipsePattern.getTargetPos();\n\n    // Update octree. Note: On every update, we instantiate a new octree\n    // and populate it with the new pigeon position. So everytime, \n    // the neighbors get updated. \n    this.octreeManager.update(patternPos, this.pigeons); \n\n    let nAgents = []; // Neighboring agents. \n    this.pigeons.forEach(p => {\n      // Update the target's position \n      p.setTarget(patternPos); \n      // Find and update the location of neighboring agents\n      nAgents = this.octreeManager.getNeighbours(p.position); \n      p.update(delta, nAgents);\n    });\n\n    // Set the target object's position. \n    this.target.setVector(patternPos);\n  }\n\n  // Render three.js world. \n  render() {\n    return (\n      <div style={styles.container} ref={this.ref} />\n    );\n  }\n\n  initThreeRender() {\n    // Render loop. \n    this.stats.begin();\n    this.update(); \n    this.cameraControl.update();\n    this.renderer.render(this.scene, this.cameraControl.getCamera());\n    this.stats.end();\n\n    // Register this function as a callback to every repaint from the browser.\n    requestAnimationFrame(this.initThreeRender.bind(this)); \n  }\n\n  setupRenderer() {\n    // Core renderer. \n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    }); \n    this.renderer.setClearColor(0x0b5213, 1);    // Set renderer properties\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.outputEncoding = THREE.sRGBEncoding; \n  }\n\n  setupProps() {\n    this.terrain = new Terrain(this.scene); \n    //this.scene.add(new THREE.AxesHelper(30));\n    // Definitely need the grid helper. \n    this.grid = new THREE.GridHelper(30, 10);\n    this.scene.add(this.grid);\n  }\n\n  setupLighting() {\n    // -------- Lighting ----------------\n    var ambientLight = new THREE.AmbientLight(0xD7D3D3);\n    ambientLight.intensity = 0.5;\n    var directionalLight = new THREE.DirectionalLight(0xffffff);\n    directionalLight.intensity = 1.0;\n    directionalLight.position.set(0, 100, 0).normalize();\n    //this.scene.add(ambientLight);\n    this.scene.add(directionalLight);\t\n  }\n\n  getRandomArbitrary(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n\n  setupPattern() {\n    let pos = new THREE.Vector3(0, 6, 0); // Target position\n    let radX = 10; \n    let radZ = 10;\n    let amp = 0; \n    let dir = true; \n    let moveFactor = THREE.Math.degToRad(0.3); \n    let patternObj = ellipseConstructor(pos, radX, radZ, amp, dir, moveFactor); \n    this.ellipsePattern = new EllipsePattern(patternObj); \n  }\n\n  onMouseMove(event) {\n    //mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n    //mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n    // console.log(mouse.x + ', ' + mouse.y);\n  }\n\n  onClick(event) {\n    // mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n    // mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n\n    // Raycaster.setFromCamera(mouse, this.camera);\n\n    // // calculate objects intersecting the picking ray\n    // const intersects = Raycaster.intersectObject(this.terrain.getMesh(), true);\n    // for (let i = 0; i < intersects.length; i ++) {\n    //   //intersects[ i ].object.material.color.set( 0xff0000 );\n    // }\n    // console.log('Mouse Clicked');\n\n    let a = this.gui.getSaveObject();\n    console.log(a);\n  }\n}\n\nexport default Radium(World);","/*\r\n  Name: Websocket.js\r\n  Author: Amay Kataria\r\n  Date: 09/24/2021\r\n  Description: Class responsible for communication with the webserver. We use websockets\r\n  technology for this. Here we have the websocket client, which communicates with backend\r\n  server over websockets.\r\n*/\r\n\r\nimport io  from 'socket.io-client'\r\n\r\n//const localhostURL = \"http://localhost:5000\";\r\nconst herokuURL = \"https://befantastic-martha.herokuapp.com\";\r\n\r\nclass Websocket {\r\n  constructor() {\r\n      this.siteURL = herokuURL + '/app'; \r\n\r\n      this.socket = io(this.siteURL, {\r\n          reconnection: true,\r\n          reconnectionDelay: 500,\r\n          reconnectionAttempts: Infinity\r\n      });\r\n\r\n      this.socket.once('connect', this.subscribe.bind(this));\r\n      this.handlePresetsCbk = ''; \r\n  }\r\n\r\n  subscribe() {\r\n      console.log('Connected');\r\n\r\n      // Subscribe to incoming events from the webserver here. \r\n      this.socket.on('time', this.logTime.bind(this));\r\n      this.socket.on('receivePresets', this.handlePresets.bind(this));\r\n  }\r\n\r\n  handlePresets(data) {\r\n    this.handlePresetsCbk(data); \r\n  }\r\n\r\n  // ----------------------- DATABASE CALLS --------------------- //\r\n  saveGuiPreset(presetName, json) {\r\n      let payload = {\r\n          'name':  presetName, \r\n          'data': json\r\n      }\r\n      this.socket.emit('savePreset', payload); \r\n  }\r\n\r\n  readAllPresets(readPresetsCallback) {\r\n    this.socket.emit('getPresets'); \r\n    this.handlePresetsCbk = readPresetsCallback; // Subscribe to receive data when the call completes. \r\n  }\r\n\r\n  deletePreset(presetName) {\r\n    this.socket.emit('deletePreset', presetName);\r\n  }\r\n\r\n  // -------------------- DON'T CHANGE THESE -------------------    \r\n  disconnect() {\r\n      console.log('Socket Server Disconnected.');\r\n  }\r\n\r\n  logTime(data) {\r\n      console.log('Socket Connection Alive: ' + data);\r\n  }\r\n}\r\n\r\nexport default new Websocket();\r\n\r\n\r\n","/*\r\n  Name: ServerGui.js\r\n  Author: Amay Kataria\r\n  Date: 09/24/2021\r\n  Description: A tweakpane GUI implementation that stores and loads presets from a backend server. \r\n  The data is transmitted across using a Websocket connection that is maintained throughout the\r\n  lifetime of the application. \r\n*/\r\n\r\nimport { Pane } from 'tweakpane';\r\nimport _ from 'lodash';\r\n\r\nimport Websocket from './Websocket';\r\n\r\nimport { WorldParams } from './World.js';\r\nimport { EllipseParams } from './PatternManager.js';\r\nimport { AgentParams } from './Agent.js';\r\nimport { OrbitParams } from './CameraControl.js'\r\n\r\n// Local params for the GUI. \r\n// Presets is a dynamically populated prop (critical)\r\nlet GuiParams = {\r\n    Preset: 'Global',\r\n    Presets: ''\r\n}\r\nconst PRESETS_IDX = 1; \r\n\r\nclass ServerGui {\r\n    constructor() {\r\n        this.gui = new Pane({title: 'Pigeon GUI'});\r\n\r\n        // Preset name\r\n        this.gui.addInput(GuiParams, 'Preset');\r\n        \r\n        // Presets.\r\n        this.presetOptions = []; // Backup object of all the preset options. // Saves the truth. \r\n        this.buildPresets(); \r\n\r\n        // Orbit controls. \r\n        let f0 = this.gui.addFolder({ title: 'Orbit Controls', expanded: true });\r\n        f0.addInput(OrbitParams, 'EnableControls', {label: 'Enable Controls'});\r\n        f0.addInput(OrbitParams, 'EnablePan', {label: 'Enable Panning'});\r\n        f0.addInput(OrbitParams, 'AutoRotate', {label: 'Enable AutoRotate'});\r\n        f0.addInput(OrbitParams, 'RotateSpeed', { label: 'Rotation Speed', min: 0.1, max: 1.0 });\r\n        f0.addInput(OrbitParams, 'EnableKeys', {label: 'Enable Keys'});\r\n\r\n        // World Parameters\r\n        let f1 = this.gui.addFolder({ title: 'World Params', expanded: true });\r\n        f1.addInput(WorldParams, 'ShowGrid', {label: 'Show Grid'});\r\n        f1.addInput(WorldParams, 'ShowTarget', {label: 'Show Target'});\r\n\r\n        let f2 = this.gui.addFolder({ title: 'Agent Params', expanded: true});\r\n        f2.addInput(AgentParams, 'MaxForce', {label: 'Max Force', min: 0.005, max: 2, step: 0.005});\r\n        f2.addInput(AgentParams, 'SmoothFactor', {label: 'Smooth Factor', min: 0.005, max: 0.1, step: 0.005});\r\n        f2.addInput(AgentParams, 'SeperationForce', {label: 'Seperation Force', min: 0.5, max: 2, step: 0.1}); \r\n        f2.addInput(AgentParams, 'CohesionForce', {label: 'Cohesion Force', min: 0.1, max: 2, step: 0.1});\r\n        f2.addInput(AgentParams, 'AlignmentForce', {label: 'Alignment Force', min: 0, max: 2, step: 0.1}); \r\n\r\n        // Save Preset button\r\n        this.gui.addButton({title: 'Save Preset'}).on('click', this.onSavePreset.bind(this));       \r\n        this.gui.addButton({title: 'Delete Preset'}).on('click', this.onDeletePreset.bind(this));\r\n\r\n        // Read presets from the database. \r\n        Websocket.readAllPresets(this.onReceivePresets.bind(this)); \r\n    }\r\n\r\n    onPresetSelected(event) {\r\n        // The value of the select preset is the JSON value. \r\n        let guiJson = JSON.parse(event.value); \r\n        this.gui.importPreset(guiJson);\r\n    }\r\n\r\n    onReceivePresets(data) {\r\n        console.log('All the presets received:');\r\n        console.log(data);\r\n\r\n        // If there are valid presets. \r\n        if (data.length > 0) {\r\n            // Build preset options. \r\n            data.forEach(d => {\r\n                let name = d['name'];\r\n                let config = d['config'];\r\n                // We push here rather than unshift because it's okay to just read this is in the order\r\n                // the entries were pushed in the database. \r\n                this.presetOptions.push({ text: name, value: JSON.stringify(config)});\r\n            }); \r\n\r\n            // Get the first preset and set the GUI with that. \r\n            let defaultPresetJSON = data[0]['config'];\r\n            this.gui.importPreset(defaultPresetJSON);\r\n\r\n            // Rebuild the preset controller using this.presetOptions. \r\n            this.disposePresets();\r\n            this.buildPresets();\r\n        }\r\n    }\r\n\r\n    onSavePreset() {\r\n        let presetName = GuiParams.Preset; \r\n        if (presetName.length > 0) {\r\n            // Clear the presets first. \r\n            this.disposePresets(); \r\n            let json = this.gui.exportPreset(); \r\n\r\n            // Does this preset exist? \r\n            let preset = _.find(this.presetOptions, p => {\r\n                return p.text === presetName;\r\n            });\r\n\r\n            if (preset) {\r\n                // Update local json of the preset.\r\n                console.log('Preset Exists. Updating database and local copy of the preset.');\r\n                preset.value = JSON.stringify(json);\r\n                // NOTE: Update the preset options array to maintain the order of the updated presets. \r\n                // Unfortunately, we need to rebuild the presets everytime and we want to make sure \r\n                // the order of presets doesn't change. \r\n                this.presetOptions = _.sortBy(this.presetOptions, ({text}) => { \r\n                    return text === presetName ? 0: 1;\r\n                });\r\n            } else {\r\n                console.log('Preset doesnt exist. New entry in the database.');\r\n                this.presetOptions.unshift({ text: presetName, value: JSON.stringify(json)} );\r\n            }\r\n\r\n            // Update database. \r\n            Websocket.saveGuiPreset(presetName, json); \r\n\r\n            // Rebuild the presets. \r\n            this.buildPresets(); \r\n        } else {\r\n            alert('Not an empty entry please.');\r\n        }\r\n    }\r\n\r\n    onDeletePreset() {\r\n        if (this.presetOptions.length > 0) {\r\n            let presetName = GuiParams.Preset; \r\n            console.log('Deleting preset: ' + presetName);\r\n\r\n            // Remove that element from the array. \r\n            // Updates the original array. \r\n            _.remove(this.presetOptions, p => p.text === presetName); \r\n\r\n            // Delete the preset from the database. \r\n            Websocket.deletePreset(presetName); \r\n\r\n            // Rebuild the preset list. \r\n            this.disposePresets(); \r\n            this.buildPresets();\r\n\r\n            // Maybe I'm the last entry in the database. \r\n            if (this.presetOptions.length > 0) {\r\n                // Get preset options for the first preset options entry. \r\n                let presetJson = this.presetOptions[0].value; \r\n                this.gui.importPreset(JSON.parse(presetJson));\r\n            }\r\n        }\r\n    }\r\n\r\n    disposePresets() {\r\n        GuiParams.Presets = '';\r\n        this.presetList.dispose();\r\n    }\r\n\r\n    buildPresets() {\r\n        this.presetList = this.gui.addInput(GuiParams, 'Presets', {\r\n            index: PRESETS_IDX,\r\n            options: this.presetOptions\r\n        }); \r\n        this.presetList.on('change', this.onPresetSelected.bind(this));\r\n    }\r\n} \r\n\r\n// Keep a singleton instance of this - through App.js\r\nexport default ServerGui;\r\n\r\n//     // // Ellipse parameters\r\n//     // let ellipseFolder = this.gui.addFolder('Ellipse Params'); \r\n//     // ellipseFolder.add(ellipseParams, 'originPosX').name('OriginX')\r\n//     // .min(-20).max(20).step(0.1);\r\n//     // ellipseFolder.add(ellipseParams, 'originPosY').name('OriginY')\r\n//     // .min(0).max(50).step(0.1);\r\n//     // ellipseFolder.add(ellipseParams, 'originPosZ').name('OriginZ')\r\n//     // .min(-50).max(50).step(0.1);\r\n//     // ellipseFolder.add(ellipseParams, 'radiusX').name('RadX')\r\n//     // .min(0).max(20).step(0.5);\r\n//     // ellipseFolder.add(ellipseParams, 'radiusZ').name('RadZ')\r\n//     // .min(0).max(20).step(0.5);\r\n//     // ellipseFolder.add(ellipseParams, 'amplitude').name('Amplitude')\r\n//     // .min(0).max(10).step(0.5);\r\n//     // ellipseFolder.add(ellipseParams, 'speed').name('Speed')\r\n//     // .min(0.1).max(1.0).step(0.1);\r\n//     // ellipseFolder.add(ellipseParams, 'isClockwise').name('Is Clockwise');\r\n\r\n//     // How to save the parameters in a preset, so next time we pull those params.\r\n//   }\r\n","/*\n  Name: App.js\n  Author: Amay Kataria\n  Date: 08/19/2021\n  Description: Entry point for the application.\n*/\n\nimport React from 'react'\nimport Radium from 'radium'\nimport World from './World.js'\nimport ServerGui from './ServerGui.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state={\n    };\n\n    this.totalRef = React.createRef(); \n    this.worldRef = React.createRef(); \n    this.gui = new ServerGui();\n  }\n\n  render() {\n    return (\n      <div>\n          <World ref={this.worldRef} />\n      </div>\n    );\n  }\n\n  componentDidUpdate() {\n    console.log(this.totalRef.current.scrollHeight);\n  }\n}\n\nexport default Radium(App);\n\n// Some logic to realign the height of the world. \n// setTimeout(() => {\n//   // let totalHeight = this.totalRef.current.scrollHeight; \n//   // let totalHeight = 600; \n//   // this.worldRef.current.updateRendererHeight(totalHeight);\n//   // console.log(totalHeight);\n// }, 300); ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './font/stylesheet.css';\nimport App from './components/App';\nimport {StyleRoot} from 'radium'\n\n// Use StyleRoot to enable keyframes and media queries for Javascript type\n// styles with Radium in components. \n// Single render function for the entire application. \nReactDOM.render(<StyleRoot><App /></StyleRoot>, document.getElementById('root'));","module.exports = __webpack_public_path__ + \"static/media/Bird_simple.d1d4aa0b.glb\";","module.exports = __webpack_public_path__ + \"static/media/world.9a0ad0bd.glb\";"],"sourceRoot":""}