{"version":3,"sources":["models/Bird_simple.glb","components/Utility.js","components/PatternManager.js","components/Agent.js","components/Pigeon.js","components/Target.js","components/World.js","components/App.js","index.js"],"names":["module","exports","axisRotation","axis_x","axis_y","axis_z","angle_radians","q","norm","Math","sqrt","cos","sin","set","Pattern","patternObj","this","theta_rad","amp","isClockwise","dir","originPos","pos","moveFactor","move","targetPos","THREE","maxTheta","r","x","z","y","EllipsePattern","radX","radx","radZ","radz","PI","xPos","cartesianX","zPos","cartesianZ","yPos","cartesianY","updateTheta","Agent","position","velocity","acceleration","rotationA","rotationB","fSteer","sumVec","diffVec","maxForce","maxSpeed","maxSlowDownSpeed","slowDownTolerance","arriveTolerance","smoothFactor","target","setupPattern","updatePattern","seek","applyForce","addVectors","clampLength","add","multiplyScalar","subVectors","value","low1","high1","low2","high2","d","lengthSq","normalize","newMaxSpeed","sub","console","log","amplitude","ellipseConstructor","degToRad","ellipsePattern","update","patternPos","getTargetPos","copy","loader","GLTFLoader","Pigeon","scene","loadPigeon","load","model","gltf","pigeon","agent","frustumCulled","castShadow","receiveShadow","agentPosition","agentRotation","rotation","agentScale","scale","agentAnimations","animations","animationMixer","clipAction","play","undefined","error","delta","updateAgent","syncPosition","azimuth","inclination","v","atan2","acos","length","Utility","multiply","setRotationFromQuaternion","Target","geometry","material","color","wireframe","mesh","visible","OrbitControls","oc","styles","container","zIndex","top","overflowX","overflowY","guiParams","showGrid","showTarget","World","props","state","ref","React","createRef","setupCamera","setupProps","setupGui","setupLighting","setupRenderer","setupOrbitControls","stats","Stats","clock","current","appendChild","renderer","domElement","dom","initThreeRender","grid","setVisibility","getDelta","setVector","style","begin","controls","render","camera","end","requestAnimationFrame","bind","antialias","setClearColor","setSize","window","innerWidth","innerHeight","setPixelRatio","devicePixelRatio","outputEncoding","enablePan","enabled","enableKeys","lookAt","i","box","r1","getRandomArbitrary","r2","side","plane","ambientLight","intensity","directionalLight","gui","dat","name","min","max","random","Component","Radium","App","totalRef","worldRef","scrollHeight","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3cc67752.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Bird_simple.d1d4aa0b.glb\";","const getRandomNum = (max = 0, min = 0) => {\n    return Math.floor(Math.random() * (max + 1 - min)) + min;\n}\n\nconst map_range = (value, low1, high1, low2, high2) => {\n    return low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n}\n\nconst azimuth = (v) => {\n    return Math.atan2(v.y, v.x);\n}\n\nconst inclination = (v) => {\n    return Math.acos(v.z / v.length());\n}\n\nconst axisRotation = (axis_x, axis_y, axis_z, angle_radians, q) => {\n    var norm = Math.sqrt(axis_x * axis_x + axis_y * axis_y + axis_z * axis_z);\n    axis_x /= norm;\n    axis_y /= norm;\n    axis_z /= norm;\n    var cos = Math.cos(angle_radians / 2);\n    var sin = Math.sin(angle_radians / 2);\n    q.set(axis_x * sin, axis_y * sin, axis_z * sin, cos); \n}\n\nexport {\n    getRandomNum,\n    map_range,\n    azimuth,\n    inclination,\n    axisRotation\n}","import * as THREE from 'three'\n\nclass Pattern {\n    constructor(patternObj) {\n        this.theta_rad = 0; \n        this.amp = patternObj.amp;  \n        this.isClockwise = patternObj.dir; \n        this.originPos = patternObj.pos; \n        this.moveFactor = patternObj.move; \n        this.targetPos = new THREE.Vector3(0, 0, 0); // Agents follow this target. \n    }\n\n    updateTheta(maxTheta) {\n        // Update theta based on direction. \n        this.theta_rad = this.isClockwise ? \n            this.theta_rad + this.moveFactor : \n            this.theta_rad - this.moveFactor; \n\n        // Reset theta. \n        this.theta_rad = this.theta_rad >= maxTheta ? 0 : this.theta_rad;\n    }\n\n    cartesianX(r) {\n        return this.originPos.x + r * Math.cos(this.theta_rad);\n    }\n\n    cartesianZ(r) {\n        return this.originPos.z + r * Math.sin(this.theta_rad);\n    }\n    \n    cartesianY(r) {\n        return this.originPos.y + this.amp * Math.sin(this.theta_rad);\n    }\n\n    getTargetPos() {\n        return this.targetPos; \n    }\n\n    // Debug Only \n    // To see where we're at. \n    syncPatternObj() {\n        // SparkUtility.syncSceneObject(this.originObj, this.targetPos); \n    }\n}\n\nexport const ellipseConstructor = (originPos, radX, radZ, amplitude, isClockwise, moveFactor) => {\n    return {\n        pos: originPos, // C\n        radx: radX,\n        radz: radZ,\n        amp: amplitude, // C\n        dir: isClockwise, // C\n        move: moveFactor // C\n    }; \n}\n\nexport class EllipsePattern extends Pattern {\n    constructor(patternObj) {\n        super(patternObj); \n        this.radX = patternObj.radx; \n        this.radZ = patternObj.radz; \n        this.maxTheta = 2*Math.PI; \n    }\n\n    update() {\n        // Ellipse: Cartesian coordinates. \n        let xPos = this.cartesianX(this.radX); // Defines polar curve. \n        let zPos = this.cartesianZ(this.radZ); // Define polar curve. \n        let yPos = this.cartesianY(); // Defines height. \n        this.targetPos.set(xPos, yPos, zPos); \n\n        this.updateTheta(this.maxTheta); \n    }\n}\n\nexport const roseConstructor = (originPos, radius, phase, numPetals, amplitude, isSinusoidal, isClockwise, moveFactor) => {\n    return {\n        pos: originPos, // C\n        rad: radius,\n        ph: phase, \n        numP: numPetals,\n        amp: amplitude, // C\n        isSin: isSinusoidal,\n        dir: isClockwise, // C\n        move: moveFactor // C\n    }\n}\n\n// r = asin(b + cTheta); \n// r = acos(b + cTheta); \n// a = radius\n// b = phase\n// c = numPetals\nexport class RosePattern extends Pattern {\n    constructor(patternObj) {\n        super(patternObj); \n        this.rad = patternObj.rad; \n        this.phase = patternObj.ph; \n        this.numPetals = patternObj.numP;\n        this.isSin = patternObj.isSin; \n        this.maxTheta = Math.PI; \n    }\n\n    update() {\n        let xPos, yPos, zPos; \n        let r = this.isSin ? this.rad * Math.sin(this.phase + this.numPetals * this.theta_rad) : \n            this.rad * Math.cos(this.phase + this.numPetals * this.theta_rad)\n\n        xPos = this.cartesianX(r); // Defines polar curve. \n        zPos = this.cartesianZ(r); // Defines polar curve. \n        yPos = this.cartesianY(); // Defines height. \n\n        this.targetPos.set(xPos, yPos, zPos); \n\n        this.updateTheta(this.maxTheta);\n    }\n}","import * as THREE from 'three'\nimport * as Utility from './Utility'\nimport {EllipsePattern, ellipseConstructor} from './PatternManager'\n\nconst FLOCKING_WEIGHTS = {\n    SEPERATION: 5.0,\n    COHESION: 1.5,\n    ALIGNMENT: 1.5\n}\n\nexport default class Agent {\n    constructor() {\n        // this.idx = i; \n        // // Construct all important variables. \n        this.position = new THREE.Vector3(0, 2, 0); \n        this.velocity = new THREE.Vector3(0.1, 0.1, 0.1); \n        this.acceleration = new THREE.Vector3(0, 0, 0); \n        this.rotationA = new THREE.Quaternion(); \n        this.rotationB = new THREE.Quaternion(); \n        this.fSteer = new THREE.Vector3(0, 0, 0); \n        \n        // Helper vectors. \n        this.sumVec = new THREE.Vector3(0, 0, 0);\n        this.diffVec = new THREE.Vector3(0, 0, 0); \n\n        // Force and speeds. \n        this.maxForce = 0.1; \n        this.maxSpeed = 0.1; \n        this.maxSlowDownSpeed = 0; \n\n        // Tolerances\n        this.slowDownTolerance = 0.2 * 0.2; \n        this.arriveTolerance = 0.01 * 0.01; \n        this.smoothFactor = 0.001; // Velocity smoothing.\n\n        // Target value that changes based on the pattern position. \n        this.target = new THREE.Vector3(0, 0, 0); \n\n        // The way this agent will move around the world. \n        this.setupPattern(); \n    }\n\n    updateAgent() {\n        // this.applyBehavior(); \n        // this.updatePosition();\n        this.updatePattern(); \n    }\n\n    applyBehavior() {\n        this.seek();\n        this.applyForce(); \n    }\n\n    updatePosition() {\n        // // What's my target velocity? \n        this.sumVec.addVectors(this.velocity, this.acceleration); \n        \n        // What's my intermediate velocity? \n        // Lerp the velocity rather than just updating straight up.\n        //this.velocity = this.velocity.lerp(this.sumVec, this.smoothFactor); \n        this.velocity.clampLength(-9999, this.maxSpeed); \n\n        this.position.add(this.velocity); \n\n        // Reset acceleration. \n        this.acceleration.multiplyScalar(0);\n    }\n\n    applyForce() {\n        this.acceleration.add(this.fSteer); \n    }\n\n    seek() {\n        this.fSteer.subVectors(this.target, this.position); \n       \n        let d = this.fSteer.lengthSq();\n        this.fSteer.normalize();\n\n        if (d < this.slowDownTolerance && d > this.arriveTolerance) {\n            // Start slowing down. \n            let newMaxSpeed = Utility.map_range(d, this.slowDownTolerance, this.arriveTolerance, this.maxSpeed, this.maxSlowDownSpeed); \n            this.fSteer.multiplyScalar(newMaxSpeed); \n        } else {\n            // We are still trying to get to the target. \n            this.fSteer.multiplyScalar(this.maxSpeed); \n        }\n\n        this.fSteer.sub(this.velocity); \n\n        //this.fSteer = MathUtility.clamp(this.fSteer, this.maxForce); \n        this.fSteer.clampLength(-99999, this.maxForce); \n\n        console.log(this.fSteer);\n    }\n\n    setupPattern() {\n        let pos = new THREE.Vector3(0, 2, 0); // Target position\n        let radX = 5; \n        let radZ = 5;\n        let amp = 1; \n        let dir = true; \n        let moveFactor = THREE.Math.degToRad(0.1); \n        let patternObj = ellipseConstructor(pos, radX, radZ, amp, dir, moveFactor); \n        this.ellipsePattern = new EllipsePattern(patternObj); \n    }\n\n    updatePattern() {\n        this.ellipsePattern.update(); \n        let patternPos = this.ellipsePattern.getTargetPos();\n        this.target.copy(patternPos);\n    }\n}","/*\r\n  Author: Amay Kataria\r\n  Date: 08/19/2021\r\n  Title: Pigeon.js\r\n  Description: Pigeon class that extends the agent class. It loads the bird model \r\n  and executes high level animations, etc. \r\n*/\r\n\r\nimport * as THREE from 'three'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'\r\nimport Agent from './Agent.js'\r\nimport model from '../models/Bird_simple.glb'; \r\nimport * as Utility from './Utility';\r\n\r\nconst loader = new GLTFLoader(); \r\n\r\nexport default class Pigeon extends Agent {\r\n    constructor(scene) {\r\n        super();\r\n        this.loadPigeon(scene); \r\n    }\r\n\r\n    loadPigeon(scene) {\r\n        loader.load(model, gltf => {\r\n            this.pigeon = gltf.scene; \r\n            \r\n            // Agent is the parent object under which pigeon sits. \r\n            this.agent = new THREE.Group();\r\n            this.agent.add(this.pigeon); \r\n            this.agent.frustumCulled = false;\r\n            this.agent.castShadow = true;\r\n            this.agent.receiveShadow = true; \r\n\r\n            // Store all the parameters that we'll be changing for this agent. \r\n            this.agentPosition = this.agent.position; \r\n            this.agentRotation = this.agent.rotation; \r\n            this.agentScale = this.agent.scale; \r\n            this.agentAnimations = gltf.animations; \r\n\r\n            // Setup animation. \r\n            this.animationMixer = new THREE.AnimationMixer(this.agent); \r\n            var action = this.animationMixer.clipAction(this.agentAnimations[0]);\r\n            action.play(); \r\n\r\n            // Add it to the scene. \r\n            scene.add(this.agent); \r\n        }, undefined, function ( error ) {\r\n            console.error(error);\r\n        }); \r\n    }\r\n\r\n    update(delta) {\r\n        // Animation update. \r\n        if (this.animationMixer) {\r\n            this.animationMixer.update(delta);\r\n\r\n            // Behaviors. \r\n            this.updateAgent();  \r\n\r\n            // Sync rotation and position. \r\n            this.syncPosition();\r\n            //this.syncRotation(); \r\n        }\r\n    }\r\n\r\n    syncPosition() {\r\n        // Sync position of the agent with \r\n        // the actual agent scene. \r\n        this.agent.position.copy(this.position);\r\n    }\r\n\r\n    syncRotation() {\r\n        // Agent rotation.\r\n        let azimuth, inclination; \r\n        azimuth = Utility.azimuth(this.velocity); \r\n        inclination = Utility.inclination(this.velocity);\r\n\r\n        Utility.axisRotation(0, 0, 1, azimuth - Math.PI/2, this.rotationA); \r\n        Utility.axisRotation(1, 0, 0, Math.PI/2 - inclination, this.rotationB); \r\n                    \r\n        this.rotationA.multiply(this.rotationB);\r\n        this.agent.setRotationFromQuaternion(this.rotationA);\r\n    }\r\n}\r\n\r\n\r\n","import * as THREE from 'three';\n\nexport default class Target {\n    constructor(scene) {\n        let geometry = new THREE.SphereGeometry(0.2, 15, 15);\n        let material = new THREE.MeshLambertMaterial({color: new THREE.Color(1, 0, 0), wireframe: false}); \n        this.mesh = new THREE.Mesh(geometry, material);\n\n        scene.add(this.mesh);\n    }\n\n    getVector() {\n        return this.mesh.position; \n    }\n\n    setVector(v) {\n        this.mesh.position.copy(v);\n    }\n\n    setVisibility(v) {\n        this.mesh.visible = v;\n    }\n}","/*\n  Name: World.js\n  Author: Amay Kataria\n  Date: 08/19/2021\n  Description: This is where Three.js world is initialized. It's the entry point for the three-dimensional \n  world and creating all elements. \n*/\n\nimport React from 'react'\nimport Radium from 'radium'\nimport * as THREE from 'three'\nimport oc from 'three-orbit-controls'\nimport Stats from 'stats.js'\nimport * as dat from 'dat.gui'\nimport Pigeon from './Pigeon.js'\nimport Target from './Target.js'\n\nconst OrbitControls = oc(THREE); \nexport const WORLD_STATE = {\n  PATTERN: 0,\n  FLOCK: 1\n}; \n\nconst styles = {\n  container: {\n      // position: 'absolute',\n      zIndex: 0,\n      top: '0%',\n      overflowX: 'hidden',\n      overflowY: 'auto'\n  }\n};\n\n// Gui Parameters. \nconst guiParams = {\n  showGrid: true,\n  showTarget: true\n};\n\nclass World extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state={};\n\n    // Pointer to the div that holds the Three.js world.\n    this.ref = React.createRef(); \n    \n    // 3D scene object where everything is added. \n    this.scene = new THREE.Scene(); \n\n    // Static setup that can happen after scene is initialized. \n    this.setupCamera();  \n    this.setupProps(); \n    this.setupGui(); \n    this.setupLighting();\n    this.setupRenderer(); \n    this.setupOrbitControls(); \n\n    // Create the pigeon. \n    this.pigeon = new Pigeon(this.scene);\n\n    // Create the target object. \n    this.target = new Target(this.scene);\n\n    // Other helpers. \n    this.stats = new Stats(); \n    this.clock = new THREE.Clock(); \n  }\n\n  componentDidMount() {\n    // Mount the canvas at the current div. \n    this.ref.current.appendChild(this.renderer.domElement); \n    this.ref.current.appendChild(this.stats.dom);\n\n    this.initThreeRender(); \n  }\n\n  // Called every animation frame. \n  update() {\n    // Update everything in here. \n    this.grid.visible = guiParams.showGrid;\n    this.target.setVisibility(guiParams.showTarget);\n\n    // Update agent and its position. \n    var delta = this.clock.getDelta(); \n    this.pigeon.update(delta);\n\n    let targetPos = this.pigeon.target; \n    this.target.setVector(targetPos);\n  }\n\n  // Render three.js world. \n  render() {\n    return (\n      <div style={styles.container} ref={this.ref} />\n    );\n  }\n\n  initThreeRender() {\n    // Render loop. \n    this.stats.begin();\n    this.update(); \n    this.controls.update();\n    this.renderer.render(this.scene, this.camera);\n    this.stats.end();\n\n    // Register this function as a callback to every repaint from the browser.\n    requestAnimationFrame(this.initThreeRender.bind(this)); \n  }\n\n  setupRenderer() {\n    // Core renderer. \n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    }); \n    this.renderer.setClearColor(0x118a1f, 1);    // Set renderer properties\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.outputEncoding = THREE.sRGBEncoding; \n  }\n\n  setupOrbitControls() {\n    this.controls = new OrbitControls(this.camera); \n    this.controls.enablePan = true;\n    // controls.autoRotate = true; \n    // controls.autoRotateSpeed = 0.1;\n    this.controls.enabled = true; \n    this.controls.enableKeys = true;\n  }\n\n  setupCamera() {\n    // Camera Setup\n    // (FOV, AspectRatio, Near Clipping, Far Clipping)\n    this.camera = new THREE.PerspectiveCamera(60, window.innerWidth/window.innerHeight, 0.05, 20000);\n    this.camera.position.set(4, 4, 4); \n    this.camera.lookAt(new THREE.Vector3(0, 0, 0));\n    this.camera.frustumCulled = false; \n  }\n\n  setupProps() {\n    let defaultHeight = 0.25; \n    // Things on the ground\n    for (let i = 0; i < 100; i++) {\n      const geometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n      const material = new THREE.MeshBasicMaterial( {color: 0x612C2C} );\n      const box = new THREE.Mesh(geometry, material);      \n      let r1 = this.getRandomArbitrary(-1, 1) * 8; \n      let r2 = this.getRandomArbitrary(-1, 1) * 8; \n      box.position.x = r1;\n      box.position.z = r2; \n      box.position.y = defaultHeight;\n      this.scene.add(box);\n    }\n\n    // Ground\n    const geometry = new THREE.PlaneGeometry(20, 20);\n    const material = new THREE.MeshBasicMaterial( {color: 0x52D764, side: THREE.DoubleSide} );\n    const plane = new THREE.Mesh(geometry, material); \n    plane.rotation.x = Math.PI/2;\n    this.scene.add(plane);\n\n    // this.scene.add(new THREE.AxesHelper(30));\n    // Definitely need the grid helper. \n    this.grid = new THREE.GridHelper(30, 10);\n    this.scene.add(this.grid);\n  }\n\n  setupLighting() {\n    // -------- Lighting ----------------\n    var ambientLight = new THREE.AmbientLight(0xD7D3D3);\n    ambientLight.intensity = 1.5;\n    var directionalLight = new THREE.DirectionalLight(0xffffff);\n    directionalLight.intensity = 3.0;\n    directionalLight.position.set(0, 50, 50).normalize();\n    this.scene.add(ambientLight);\n    this.scene.add(directionalLight);\t\n  }\n\n  setupGui() {\n    this.gui = new dat.GUI();\n    this.gui.add(guiParams, 'showGrid' ).name('Show Grid');\n    this.gui.add(guiParams, 'showTarget').name('Show Target');\n  }\n\n  getRandomArbitrary(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n}\n\nexport default Radium(World);","/*\n  Name: App.js\n  Author: Amay Kataria\n  Date: 08/19/2021\n  Description: Entry point for the application.\n*/\n\nimport React from 'react'\nimport Radium from 'radium'\nimport World from './World.js'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state={\n    };\n\n    this.totalRef = React.createRef(); \n    this.worldRef = React.createRef(); \n  }\n\n  render() {\n    return (\n      <div>\n          <World ref={this.worldRef} />\n      </div>\n    );\n  }\n\n  componentDidUpdate() {\n    console.log(this.totalRef.current.scrollHeight);\n  }\n}\n\nexport default Radium(App);\n\n// Some logic to realign the height of the world. \n// setTimeout(() => {\n//   // let totalHeight = this.totalRef.current.scrollHeight; \n//   // let totalHeight = 600; \n//   // this.worldRef.current.updateRendererHeight(totalHeight);\n//   // console.log(totalHeight);\n// }, 300); ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './font/stylesheet.css';\nimport App from './components/App';\nimport {StyleRoot} from 'radium'\n\n// Use StyleRoot to enable keyframes and media queries for Javascript type\n// styles with Radium in components. \n// Single render function for the entire application. \nReactDOM.render(<StyleRoot><App /></StyleRoot>, document.getElementById('root'));"],"sourceRoot":""}