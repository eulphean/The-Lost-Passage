{"version":3,"sources":["models/Bird_simple.glb","models/world.glb","components/Utility.js","components/Agent.js","components/Pigeon.js","components/Target.js","components/Terrain.js","components/PatternManager.js","components/OctreeManager.js","components/World.js","components/App.js","index.js"],"names":["module","exports","axisRotation","axis_x","axis_y","axis_z","angle_radians","q","norm","Math","sqrt","cos","sin","set","FLOCKING_WEIGHTS","Agent","this","position","THREE","random","velocity","acceleration","rotationA","rotationB","fSteer","vDesired","sumVec","diffVec","maxForce","maxSpeed","getRandomArbitrary","maxSlowDownSpeed","slowDownTolerance","arriveTolerance","smoothFactor","target","nAgents","seekTarget","flock","updatePosition","seek","applyForce","length","seperation","cohesion","align","addVectors","lerp","clampLength","add","multiplyScalar","subVectors","normalize","value","low1","high1","low2","high2","d","lengthSq","newMaxSpeed","forEach","n","divideScalar","a","sub","targetPos","copy","min","max","loader","GLTFLoader","Pigeon","scene","loadPigeon","load","model","gltf","pigeon","parent","frustumCulled","castShadow","receiveShadow","agentPosition","agentRotation","rotation","agentScale","scale","agentAnimations","animations","animationMixer","clipAction","play","undefined","error","console","delta","update","updateAgent","syncPosition","syncRotation","azimuth","inclination","v","atan2","x","z","acos","y","Utility","PI","multiply","setRotationFromQuaternion","Target","geometry","material","color","wireframe","mesh","visible","Terrain","loadTerrain","terrain","terrainPosition","terrainRotation","terrainScale","Pattern","patternObj","theta_rad","amp","isClockwise","dir","originPos","pos","moveFactor","move","maxTheta","r","EllipsePattern","radX","radx","radZ","radz","xPos","cartesianX","zPos","cartesianZ","yPos","cartesianY","updateTheta","Octree","origin","boundary","Vector3","tree","PointOctree","agent","insert","radius","findPoints","pointCount","OctreeManager","flockOctree","flockTarget","liarbirds","setupOctree","l","insertPoint","scanForPoints","push","OrbitControls","oc","Raycaster","mouse","styles","container","zIndex","top","overflowX","overflowY","worldParams","showGrid","showTarget","ellipseParams","height","radiusX","radiusZ","amplitude","speed","World","props","state","ref","React","createRef","setupCamera","setupProps","setupGui","setupLighting","setupRenderer","setupOrbitControls","stats","Stats","clock","setupPattern","octreeManager","pigeons","current","appendChild","renderer","domElement","dom","i","p","initThreeRender","window","addEventListener","onMouseMove","bind","onClick","setVisibility","getDelta","ellipsePattern","patternPos","getTargetPos","setTarget","getNeighbours","setVector","style","begin","controls","render","camera","end","requestAnimationFrame","antialias","setClearColor","setSize","innerWidth","innerHeight","setPixelRatio","devicePixelRatio","outputEncoding","enablePan","enabled","enableKeys","lookAt","intensity","directionalLight","gui","dat","worldFolder","addFolder","name","ellipseFolder","step","onFinishChange","onFinishEllipseParams","ellipseConstructor","degToRad","event","log","clientX","clientY","setFromCamera","intersects","intersectObject","getMesh","Component","Radium","App","totalRef","worldRef","scrollHeight","ReactDOM","document","getElementById"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,qQCgBrCC,EAAe,SAACC,EAAQC,EAAQC,EAAQC,EAAeC,GACzD,IAAIC,EAAOC,KAAKC,KAAKP,EAASA,EAASC,EAASA,EAASC,EAASA,GAClEF,GAAUK,EACVJ,GAAUI,EACVH,GAAUG,EACV,IAAIG,EAAMF,KAAKE,IAAIL,EAAgB,GAC/BM,EAAMH,KAAKG,IAAIN,EAAgB,GACnCC,EAAEM,IAAIV,EAASS,EAAKR,EAASQ,EAAKP,EAASO,EAAKD,ICpB9CG,EACU,IADVA,EAEQ,GAFRA,EAGS,GAGMC,E,WACjB,aAAe,oBAGXC,KAAKC,SAAW,IAAIC,UAA8B,GAAhBT,KAAKU,SAAe,EAAG,GACzDH,KAAKI,SAAW,IAAIF,UAAc,GAAK,GAAK,IAC5CF,KAAKK,aAAe,IAAIH,UAAc,EAAG,EAAG,GAC5CF,KAAKM,UAAY,IAAIJ,aACrBF,KAAKO,UAAY,IAAIL,aACrBF,KAAKQ,OAAS,IAAIN,UAAc,EAAG,EAAG,GACtCF,KAAKS,SAAW,IAAIP,UAAc,EAAG,EAAG,GAGxCF,KAAKU,OAAS,IAAIR,UAAc,EAAG,EAAG,GACtCF,KAAKW,QAAU,IAAIT,UAAc,EAAG,EAAG,GAGvCF,KAAKY,SAAW,IAChBZ,KAAKa,SAAWb,KAAKc,mBAAmB,KAAO,MAC/Cd,KAAKe,iBAAmB,EAGxBf,KAAKgB,kBAAoB,GAAM,GAC/BhB,KAAKiB,gBAAkB,KACvBjB,KAAKkB,aAAe,IAGpBlB,KAAKmB,OAAS,IAAIjB,UAAc,EAAG,EAAG,G,+CAG1C,SAAYkB,GACRpB,KAAKqB,aACLrB,KAAKsB,MAAMF,GACXpB,KAAKuB,mB,wBAGT,WACIvB,KAAKwB,OACLxB,KAAKyB,e,mBAGT,SAAML,GACEA,EAAQM,OAAS,IACjB1B,KAAK2B,WAAWP,GAChBpB,KAAKyB,aAELzB,KAAK4B,SAASR,GACdpB,KAAKyB,aAELzB,KAAK6B,MAAMT,GACXpB,KAAKyB,gB,4BAIb,WAEIzB,KAAKU,OAAOoB,WAAW9B,KAAKI,SAAUJ,KAAKK,cAI3CL,KAAKI,SAAWJ,KAAKI,SAAS2B,KAAK/B,KAAKU,OAAQV,KAAKkB,cACrDlB,KAAKI,SAAS4B,aAAa,KAAMhC,KAAKa,UAEtCb,KAAKC,SAASgC,IAAIjC,KAAKI,UACvBJ,KAAKK,aAAa6B,eAAe,K,wBAGrC,WAEIlC,KAAKK,aAAa4B,IAAIjC,KAAKQ,U,kBAG/B,WAEIR,KAAKS,SAAS0B,WAAWnC,KAAKmB,OAAQnB,KAAKC,UAC3CD,KAAKS,SAAS2B,YAEd,IDlFWC,EAAOC,EAAMC,EAAOC,EAAMC,ECkFjCC,EAAI1C,KAAKS,SAASkC,WACtB,GAAID,EAAI1C,KAAKgB,mBAAqB0B,EAAI1C,KAAKiB,gBAAiB,CACxD,IAAI2B,GDpFGP,ECoF6BK,EDpFtBJ,ECoFyBtC,KAAKgB,kBDpFxBuB,ECoF2CvC,KAAKiB,gBDpFzCuB,ECoF0DxC,KAAKa,SDpFzD4B,ECoFmEzC,KAAKe,iBDnF1GyB,GAAQC,EAAQD,IAASH,EAAQC,IAASC,EAAQD,ICoFjDtC,KAAKS,SAASyB,eAAeU,QAE7B5C,KAAKS,SAASyB,eAAelC,KAAKa,UAItCb,KAAKQ,OAAO2B,WAAWnC,KAAKS,SAAUT,KAAKI,UAC3CJ,KAAKQ,OAAOwB,aAAa,MAAOhC,KAAKY,Y,wBAGzC,SAAWQ,GAAU,IAAD,OAChBpB,KAAKQ,OAAOX,IAAI,EAAG,EAAG,GACtBG,KAAKU,OAAOb,IAAI,EAAG,EAAG,GAElBuB,EAAQM,OAAS,IACjBN,EAAQyB,SAAQ,SAAAC,GACZ,EAAKnC,QAAQwB,WAAW,EAAKlC,SAAU6C,EAAE7C,UACzC,EAAKU,QAAQyB,YACb,EAAKzB,QAAQoC,aAAa,EAAKpC,QAAQe,UACvC,EAAKhB,OAAOuB,IAAI,EAAKtB,YAIzBX,KAAKU,OAAOqC,aAAa3B,EAAQM,QAC7B1B,KAAKU,OAAOiC,WAAa,IACzB3C,KAAKU,OAAO0B,YACZpC,KAAKU,OAAOsB,aAAa,MAAOhC,KAAKa,UACrCb,KAAKQ,OAAO2B,WAAWnC,KAAKU,OAAQV,KAAKI,UACzCJ,KAAKQ,OAAOwB,aAAa,MAAOhC,KAAKY,UACrCZ,KAAKQ,OAAO0B,eAAepC,O,sBAKvC,SAASsB,GAAU,IAAD,OACdpB,KAAKmB,OAAOtB,IAAI,EAAG,EAAG,GACtBG,KAAKQ,OAAOX,IAAI,EAAG,EAAG,GAElBuB,EAAQM,OAAS,IACjBN,EAAQyB,SAAQ,SAAAC,GACZ,EAAK3B,OAAOc,IAAIa,EAAE7C,aAGtBD,KAAKmB,OAAO4B,aAAa3B,EAAQM,QACjC1B,KAAKwB,OACLxB,KAAKQ,OAAO0B,eAAepC,M,mBAInC,SAAMsB,GAAU,IAAD,OACXpB,KAAKQ,OAAOX,IAAI,EAAG,EAAG,GAElBuB,EAAQM,OAAS,IACjBN,EAAQyB,SAAQ,SAAAG,GACZ,EAAKxC,OAAOyB,IAAIe,EAAE5C,aAGtBJ,KAAKQ,OAAOuC,aAAa3B,EAAQM,QACjC1B,KAAKQ,OAAO4B,YACZpC,KAAKQ,OAAO0B,eAAelC,KAAKa,UAChCb,KAAKQ,OAAOyC,IAAIjD,KAAKI,UACrBJ,KAAKQ,OAAOwB,aAAa,MAAOhC,KAAKY,UACrCZ,KAAKQ,OAAO0B,eAAepC,M,uBAInC,SAAUoD,GACNlD,KAAKmB,OAAOgC,KAAKD,K,gCAGrB,SAAmBE,EAAKC,GACrB,OAAO5D,KAAKU,UAAYkD,EAAMD,GAAOA,M,sBClJtCE,EAAS,IAAIC,IAEEC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,gBACKC,WAAWD,GAFD,E,8CAKnB,SAAWA,GAAQ,IAAD,OACdH,EAAOK,KAAKC,KAAO,SAAAC,GACf,EAAKC,OAASD,EAAKJ,MAGnB,EAAKM,OAAS,IAAI7D,QAClB,EAAK6D,OAAO9B,IAAI,EAAK6B,QACrB,EAAKC,OAAOC,eAAgB,EAC5B,EAAKD,OAAOE,YAAa,EACzB,EAAKF,OAAOG,eAAgB,EAG5B,EAAKC,cAAgB,EAAKJ,OAAO9D,SACjC,EAAKmE,cAAgB,EAAKL,OAAOM,SACjC,EAAKC,WAAa,EAAKP,OAAOQ,MAC9B,EAAKC,gBAAkBX,EAAKY,WAE5B,EAAKH,WAAWzE,IAAI,GAAM,GAAM,IAGhC,EAAK6E,eAAiB,IAAIxE,iBAAqB,EAAK6D,QACvC,EAAKW,eAAeC,WAAW,EAAKH,gBAAgB,IAC1DI,OAGPnB,EAAMxB,IAAI,EAAK8B,eAChBc,GAAW,SAAWC,GACrBC,QAAQD,MAAMA,Q,oBAItB,SAAOE,EAAO5D,GAENpB,KAAK0E,iBACL1E,KAAK0E,eAAeO,OAAOD,GAG3BhF,KAAKkF,YAAY9D,GAGjBpB,KAAKmF,eACLnF,KAAKoF,kB,0BAIb,WAGIpF,KAAK+D,OAAO9D,SAASkD,KAAKnD,KAAKC,Y,0BAGnC,WAEI,IAAIoF,EAASC,EFnEJC,IEoEiBvF,KAAKI,SAA/BiF,EFnEG5F,KAAK+F,MAAMD,EAAEE,EAAGF,EAAEG,GEoErBJ,EFjEY,SAACC,GACjB,OAAO9F,KAAKkG,KAAKJ,EAAEK,EAAIL,EAAE7D,UEgEPmE,CAAoB7F,KAAKI,UAEvCyF,EAAqB,EAAG,EAAG,EAAGR,EAASrF,KAAKM,WAC5CuF,EAAqB,EAAG,EAAG,EAAGP,EAAc7F,KAAKqG,GAAG,EAAG9F,KAAKO,WAE5DP,KAAKM,UAAUyF,SAAS/F,KAAKO,WAC7BP,KAAK+D,OAAOiC,0BAA0BhG,KAAKM,e,GAnEfP,GCdfkG,E,WACjB,WAAYxC,GAAQ,oBAChB,IAAIyC,EAAW,IAAIhG,iBAAqB,GAAK,GAAI,IAC7CiG,EAAW,IAAIjG,sBAA0B,CAACkG,MAAO,IAAIlG,QAAY,EAAG,EAAG,GAAImG,WAAW,IAC1FrG,KAAKsG,KAAO,IAAIpG,OAAWgG,EAAUC,GAErC1C,EAAMxB,IAAIjC,KAAKsG,M,6CAGnB,WACI,OAAOtG,KAAKsG,KAAKrG,W,uBAGrB,SAAUsF,GACNvF,KAAKsG,KAAKrG,SAASkD,KAAKoC,K,2BAG5B,SAAcA,GACVvF,KAAKsG,KAAKC,QAAUhB,M,sBCPtBjC,EAAS,IAAIC,IAEEiD,E,WACjB,WAAY/C,GAAQ,oBAChBzD,KAAKyG,YAAYhD,G,+CAGrB,SAAYA,GAAQ,IAAD,OACfH,EAAOK,KAAK+C,KAAS,SAAA7C,GACjB,EAAK6C,QAAU7C,EAAKJ,MAGpB,EAAKM,OAAS,IAAI7D,QAClB,EAAK6D,OAAO9B,IAAI,EAAKyE,SACrB,EAAK3C,OAAOC,eAAgB,EAC5B,EAAKD,OAAOE,YAAa,EACzB,EAAKF,OAAOG,eAAgB,EAG5B,EAAKyC,gBAAkB,EAAK5C,OAAO9D,SACnC,EAAK2G,gBAAkB,EAAK7C,OAAOM,SACnC,EAAKwC,aAAe,EAAK9C,OAAOQ,MAEhC,EAAKsC,aAAahH,IAAI,GAAI,GAAI,IAG9B4D,EAAMxB,IAAI,EAAK8B,eAChBc,GAAW,SAAWC,GACrBC,QAAQD,MAAMA,Q,qBAItB,WACI,OAAO9E,KAAK+D,W,KC5Cd+C,E,WACF,WAAYC,GAAa,oBACrB/G,KAAKgH,UAAY,EACjBhH,KAAKiH,IAAMF,EAAWE,IACtBjH,KAAKkH,YAAcH,EAAWI,IAC9BnH,KAAKoH,UAAYL,EAAWM,IAC5BrH,KAAKsH,WAAaP,EAAWQ,KAC7BvH,KAAKkD,UAAY,IAAIhD,UAAc,EAAG,EAAG,G,+CAG7C,SAAYsH,GAERxH,KAAKgH,UAAYhH,KAAKkH,YAClBlH,KAAKgH,UAAYhH,KAAKsH,WACtBtH,KAAKgH,UAAYhH,KAAKsH,WAG1BtH,KAAKgH,UAAYhH,KAAKgH,WAAaQ,EAAW,EAAIxH,KAAKgH,Y,wBAG3D,SAAWS,GACP,OAAOzH,KAAKoH,UAAU3B,EAAIgC,EAAIhI,KAAKE,IAAIK,KAAKgH,a,wBAGhD,SAAWS,GACP,OAAOzH,KAAKoH,UAAU1B,EAAI+B,EAAIhI,KAAKG,IAAII,KAAKgH,a,wBAGhD,SAAWS,GACP,OAAOzH,KAAKoH,UAAUxB,EAAI5F,KAAKiH,IAAMxH,KAAKG,IAAII,KAAKgH,a,0BAGvD,WACI,OAAOhH,KAAKkD,Y,4BAKhB,gB,KAgBSwE,EAAb,kDACI,WAAYX,GAAa,IAAD,8BACpB,cAAMA,IACDY,KAAOZ,EAAWa,KACvB,EAAKC,KAAOd,EAAWe,KACvB,EAAKN,SAAW,EAAE/H,KAAKqG,GAJH,EAD5B,0CAQI,WAEI,IAAIiC,EAAO/H,KAAKgI,WAAWhI,KAAK2H,MAC5BM,EAAOjI,KAAKkI,WAAWlI,KAAK6H,MAC5BM,EAAOnI,KAAKoI,aAChBpI,KAAKkD,UAAUrD,IAAIkI,EAAMI,EAAMF,GAE/BjI,KAAKqI,YAAYrI,KAAKwH,cAf9B,GAAoCV,G,eCxCvBwB,EAAb,WACI,WAAYC,EAAQC,GAAW,oBAC3B,IAAIpF,EAAM,IAAIqF,IAAQ,EAAG,EAAG,GACxBpF,EAAM,IAAIoF,IAAQ,EAAG,EAAG,GAE5BrF,EAAIqC,EAAI8C,EAAO9C,EAAI+C,EACnBpF,EAAIwC,EAAI2C,EAAO3C,EAAI4C,EACnBpF,EAAIsC,EAAI6C,EAAO7C,EAAI8C,EAEnBnF,EAAIoC,EAAI8C,EAAO9C,EAAI+C,EACnBnF,EAAIuC,EAAI2C,EAAO3C,EAAI4C,EACnBnF,EAAIqC,EAAI6C,EAAO7C,EAAI8C,EAEnBxI,KAAK0I,KAAO,IAAIC,IAAYvF,EAAKC,EAf5B,EACM,GACnB,+CAiBI,SAAYpD,EAAU2I,GAClB5I,KAAK0I,KAAKG,OAAO5I,EAAU2I,KAlBnC,2BAsBI,SAAc3I,EAAU6I,GACpB,OAAO9I,KAAK0I,KAAKK,WAAW9I,EAAU6I,GAAQ,KAvBtD,wBA0BI,WACI,OAAO9I,KAAK0I,KAAKM,eA3BzB,KAiCaC,EAAb,WACI,aAAe,oBACXjJ,KAAKkJ,YAAc,GAF3B,0CAKI,SAAOC,EAAaC,GAChBpJ,KAAKqJ,YAAYF,EAAaC,KANtC,yBASI,SAAYD,EAAaC,GAAY,IAAD,OAChCpJ,KAAKkJ,YAAc,IAAIZ,EAAOa,EAZT,IAarBC,EAAUvG,SAAQ,SAAAyG,GACd,EAAKJ,YAAYK,YAAYD,EAAErJ,SAAUqJ,QAZrD,2BAiBI,SAAcf,GACV,IAAoBnH,EAAQ,GAM5B,OALapB,KAAKkJ,YAAYM,cAAcjB,EApB3B,GAqBN1F,SAAQ,SAAAC,GACf,IAAIE,EAAIF,EAAC,KACT1B,EAAQqI,KAAKzG,MAEV5B,MAxBf,KC7BMsI,EAAgBC,IAAGzJ,GACnB0J,EAAY,IAAI1J,YAChB2J,EAAQ,IAAI3J,UAQZ4J,EAAS,CACbC,UAAW,CAEPC,OAAQ,EACRC,IAAK,KACLC,UAAW,SACXC,UAAW,SAKXC,EAAc,CAClBC,UAAU,EACVC,YAAY,GAGVC,EAAgB,CAClBC,OAAQ,EACRC,QAAS,GACTC,QAAU,GACVC,UAAW,EACXC,MAAO,IAGHC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAM,GAGX,EAAKC,IAAMC,IAAMC,YAGjB,EAAKzH,MAAQ,IAAIvD,QAGjB,EAAKiL,cACL,EAAKC,aACL,EAAKC,WACL,EAAKC,gBACL,EAAKC,gBACL,EAAKC,qBAGL,EAAKrK,OAAS,IAAI8E,EAAO,EAAKxC,OAG9B,EAAKgI,MAAQ,IAAIC,IACjB,EAAKC,MAAQ,IAAIzL,QAEjB,EAAK0L,eACL,EAAKC,cAAgB,IAAI5C,EAEzB,EAAK6C,QAAU,GA5BE,E,qDA+BnB,WAEE9L,KAAKgL,IAAIe,QAAQC,YAAYhM,KAAKiM,SAASC,YAC3ClM,KAAKgL,IAAIe,QAAQC,YAAYhM,KAAKyL,MAAMU,KAGxC,IAAK,IAAIC,EAAI,EAAGA,EAhEA,GAgEiBA,IAAK,CAGpC,IAAIC,EAAI,IAAI7I,EAAOxD,KAAKyD,OACxBzD,KAAK8L,QAAQrC,KAAK4C,GAGpBrM,KAAKsM,kBAELC,OAAOC,iBAAkB,YAAaxM,KAAKyM,YAAYC,KAAK1M,OAAO,GACnEuM,OAAOC,iBAAiB,QAASxM,KAAK2M,QAAQD,KAAK1M,OAAO,K,oBAI5D,WAAU,IAAD,OAGPA,KAAKmB,OAAOyL,cAAcxC,EAAYE,YAGtC,IAAItF,EAAQhF,KAAK2L,MAAMkB,WAGvB7M,KAAK8M,eAAe7H,SACpB,IAAI8H,EAAa/M,KAAK8M,eAAeE,eAKrChN,KAAK6L,cAAc5G,OAAO8H,EAAY/M,KAAK8L,SAE3C,IAAI1K,EAAU,GACdpB,KAAK8L,QAAQjJ,SAAQ,SAAAwJ,GACnBA,EAAEY,UAAUF,GACZ3L,EAAU,EAAKyK,cAAcqB,cAAcb,EAAEpM,UAC7CoM,EAAEpH,OAAOD,EAAO5D,MAIlBpB,KAAKmB,OAAOgM,UAAUJ,K,oBAMxB,WACE,OACE,yBAAKK,MAAOtD,EAAOC,UAAWiB,IAAKhL,KAAKgL,Q,6BAI5C,WAEEhL,KAAKyL,MAAM4B,QACXrN,KAAKiF,SACLjF,KAAKsN,SAASrI,SACdjF,KAAKiM,SAASsB,OAAOvN,KAAKyD,MAAOzD,KAAKwN,QACtCxN,KAAKyL,MAAMgC,MAGXC,sBAAsB1N,KAAKsM,gBAAgBI,KAAK1M,S,2BAGlD,WAEEA,KAAKiM,SAAW,IAAI/L,gBAAoB,CACtCyN,WAAW,IAEb3N,KAAKiM,SAAS2B,cAAc,OAAU,GACtC5N,KAAKiM,SAAS4B,QAAQtB,OAAOuB,WAAYvB,OAAOwB,aAChD/N,KAAKiM,SAAS+B,cAAczB,OAAO0B,kBACnCjO,KAAKiM,SAASiC,eAAiBhO,iB,gCAGjC,WACEF,KAAKsN,SAAW,IAAI5D,EAAc1J,KAAKwN,OAAQxN,KAAKuN,OAAOrB,YAC3DlM,KAAKsN,SAASa,WAAY,EAG1BnO,KAAKsN,SAASc,SAAU,EACxBpO,KAAKsN,SAASe,YAAa,I,yBAG7B,WAGErO,KAAKwN,OAAS,IAAItN,oBAAwB,GAAIqM,OAAOuB,WAAWvB,OAAOwB,YAAa,IAAM,KAC1F/N,KAAKwN,OAAOvN,SAASJ,IAAI,EAAG,EAAG,GAC/BG,KAAKwN,OAAOc,OAAO,IAAIpO,UAAc,EAAG,EAAG,IAC3CF,KAAKwN,OAAOxJ,eAAgB,I,wBAG9B,WACEhE,KAAK0G,QAAU,IAAIF,EAAQxG,KAAKyD,S,2BAOlC,WAEqB,IAAIvD,eAAmB,UAC7BqO,UAAY,GACzB,IAAIC,EAAmB,IAAItO,mBAAuB,UAClDsO,EAAiBD,UAAY,EAC7BC,EAAiBvO,SAASJ,IAAI,EAAG,IAAK,GAAGuC,YAEzCpC,KAAKyD,MAAMxB,IAAIuM,K,sBAIjB,WACExO,KAAKyO,IAAM,IAAIC,IACf,IAAIC,EAAc3O,KAAKyO,IAAIG,UAAU,gBACrCD,EAAY1M,IAAImI,EAAa,YAAayE,KAAK,aAC/CF,EAAY1M,IAAImI,EAAa,cAAcyE,KAAK,eAEhD,IAAIC,EAAgB9O,KAAKyO,IAAIG,UAAU,kBAGvCE,EAAc7M,IAAIsI,EAAe,UAAUsE,KAAK,UAC/CzL,IAAI,GAAGC,IAAI,IAAI0L,KAAK,IACpBC,eAAehP,KAAKiP,sBAAsBvC,KAAK1M,OAGhD8O,EAAc7M,IAAIsI,EAAe,WAAWsE,KAAK,QAChDzL,IAAI,GAAGC,IAAI,IAAI0L,KAAK,IACpBC,eAAehP,KAAKiP,sBAAsBvC,KAAK1M,OAGhD8O,EAAc7M,IAAIsI,EAAe,WAAWsE,KAAK,QAChDzL,IAAI,GAAGC,IAAI,IAAI0L,KAAK,IACpBC,eAAehP,KAAKiP,sBAAsBvC,KAAK1M,S,mCAGlD,SAAsBuF,M,gCAItB,SAAmBnC,EAAKC,GACtB,OAAO5D,KAAKU,UAAYkD,EAAMD,GAAOA,I,0BAGvC,WACE,IAMI2D,EFtM0B,SAACK,EAAWO,EAAME,EAAM8C,EAAWzD,EAAaI,GAC9E,MAAO,CACHD,IAAKD,EACLQ,KAAMD,EACNG,KAAMD,EACNZ,IAAK0D,EACLxD,IAAKD,EACLK,KAAMD,GE+LO4H,CANP,IAAIhP,UAAc,EAAG,EAAG,GACvB,GACA,GACD,GACA,EACOA,OAAWiP,SAAS,KAErCnP,KAAK8M,eAAiB,IAAIpF,EAAeX,K,yBAI3C,SAAYqI,GAGVrK,QAAQsK,IAAIxF,EAAMpE,EAAI,KAAOoE,EAAMjE,K,qBAGrC,SAAQwJ,GACNvF,EAAMpE,EAAM2J,EAAME,QAAU/C,OAAOuB,WAAe,EAAI,EACtDjE,EAAMjE,GAAQwJ,EAAMG,QAAUhD,OAAOwB,YAAgB,EAAI,EAEzDnE,EAAU4F,cAAc3F,EAAO7J,KAAKwN,QAIpC,IADA,IAAMiC,EAAa7F,EAAU8F,gBAAgB1P,KAAK0G,QAAQiJ,WAAW,GAC5DvD,EAAI,EAAGA,EAAIqD,EAAW/N,OAAQ0K,KAGvCrH,QAAQsK,IAAI,qB,GAnNIpE,IAAM2E,WAuNXC,cAAOhF,GClQhBiF,E,kDACJ,WAAYhF,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAM,GAGX,EAAKgF,SAAW9E,IAAMC,YACtB,EAAK8E,SAAW/E,IAAMC,YANL,E,0CASnB,WACE,OACE,6BACI,kBAAC,EAAD,CAAOF,IAAKhL,KAAKgQ,c,gCAKzB,WACEjL,QAAQsK,IAAIrP,KAAK+P,SAAShE,QAAQkE,kB,GAnBpBhF,IAAM2E,WAuBTC,cAAOC,G,QCxBtBI,IAAS3C,OAAO,kBAAC,IAAD,KAAW,kBAAC,EAAD,OAAqB4C,SAASC,eAAe,W","file":"static/js/main.1cda48a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Bird_simple.d1d4aa0b.glb\";","module.exports = __webpack_public_path__ + \"static/media/world.9a0ad0bd.glb\";","const getRandomNum = (max = 0, min = 0) => {\n    return Math.floor(Math.random() * (max + 1 - min)) + min;\n}\n\nconst map_range = (value, low1, high1, low2, high2) => {\n    return low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n}\n\nconst azimuth = (v) => {\n    return Math.atan2(v.x, v.z);\n}\n\nconst inclination = (v) => {\n    return Math.acos(v.y / v.length());\n}\n\nconst axisRotation = (axis_x, axis_y, axis_z, angle_radians, q) => {\n    var norm = Math.sqrt(axis_x * axis_x + axis_y * axis_y + axis_z * axis_z);\n    axis_x /= norm;\n    axis_y /= norm;\n    axis_z /= norm;\n    var cos = Math.cos(angle_radians / 2);\n    var sin = Math.sin(angle_radians / 2);\n    q.set(axis_x * sin, axis_y * sin, axis_z * sin, cos); \n}\n\nexport {\n    getRandomNum,\n    map_range,\n    azimuth,\n    inclination,\n    axisRotation\n}","import * as THREE from 'three'\nimport * as Utility from './Utility'\n\nconst FLOCKING_WEIGHTS = {\n    SEPERATION: 1.2,\n    COHESION: 0.5,\n    ALIGNMENT: 0.2\n}\n\nexport default class Agent {\n    constructor() {\n        // this.idx = i; \n        // // Construct all important variables. \n        this.position = new THREE.Vector3(Math.random() * 20, 2, 0); \n        this.velocity = new THREE.Vector3(0.1, 0.1, 0.1); \n        this.acceleration = new THREE.Vector3(0, 0, 0); \n        this.rotationA = new THREE.Quaternion(); \n        this.rotationB = new THREE.Quaternion(); \n        this.fSteer = new THREE.Vector3(0, 0, 0);\n        this.vDesired = new THREE.Vector3(0, 0, 0); \n        \n        // Helper vectors. \n        this.sumVec = new THREE.Vector3(0, 0, 0);\n        this.diffVec = new THREE.Vector3(0, 0, 0); \n\n        // Force and speeds. \n        this.maxForce = 0.01; \n        this.maxSpeed = this.getRandomArbitrary(0.015, 0.025); \n        this.maxSlowDownSpeed = 0; \n\n        // Tolerances\n        this.slowDownTolerance = 0.2 * 0.2; \n        this.arriveTolerance = 0.01 * 0.01; \n        this.smoothFactor = 0.01; // Velocity smoothing.\n\n        // Target value that changes based on the pattern position. \n        this.target = new THREE.Vector3(0, 0, 0); \n    }\n\n    updateAgent(nAgents) {\n        this.seekTarget(); \n        this.flock(nAgents); \n        this.updatePosition();\n    }\n\n    seekTarget() {\n        this.seek(); // Calculate the force required to seek the target position. \n        this.applyForce(); // Apply the force. \n    }\n\n    flock(nAgents) {\n        if (nAgents.length > 0) {\n            this.seperation(nAgents); \n            this.applyForce(); \n\n            this.cohesion(nAgents);\n            this.applyForce();\n\n            this.align(nAgents);\n            this.applyForce();\n        }\n    }\n\n    updatePosition() {\n        // Target velocity. \n        this.sumVec.addVectors(this.velocity, this.acceleration); \n        \n        // What's my intermediate velocity? \n        // Lerp the velocity rather than just updating straight up.\n        this.velocity = this.velocity.lerp(this.sumVec, this.smoothFactor); \n        this.velocity.clampLength(-9999, this.maxSpeed); \n\n        this.position.add(this.velocity); \n        this.acceleration.multiplyScalar(0); \n    }\n\n    applyForce() {\n        // Add steering force to acceleration to change the position of the agent. \n        this.acceleration.add(this.fSteer); \n    }\n\n    seek() {\n        // Calculate desired velocity. \n        this.vDesired.subVectors(this.target, this.position); \n        this.vDesired.normalize();\n\n        let d = this.vDesired.lengthSq(); \n        if (d < this.slowDownTolerance && d > this.arriveTolerance) {\n            let newMaxSpeed = Utility.map_range(d, this.slowDownTolerance, this.arriveTolerance, this.maxSpeed, this.maxSlowDownSpeed); \n            this.vDesired.multiplyScalar(newMaxSpeed); \n        } else {\n            this.vDesired.multiplyScalar(this.maxSpeed); \n        }\n\n        // Calculate steering force.\n        this.fSteer.subVectors(this.vDesired, this.velocity); \n        this.fSteer.clampLength(-99999, this.maxForce); \n    }\n\n    seperation(nAgents) {\n        this.fSteer.set(0, 0, 0); \n        this.sumVec.set(0, 0, 0); \n\n        if (nAgents.length > 0) {\n            nAgents.forEach(n => {\n                this.diffVec.subVectors(this.position, n.position); \n                this.diffVec.normalize(); \n                this.diffVec.divideScalar(this.diffVec.length());  // Weight the vector properly based on the distance from the target. \n                this.sumVec.add(this.diffVec); \n            });\n            \n            // Calculate desired force using the average desired velocity \n            this.sumVec.divideScalar(nAgents.length); \n            if (this.sumVec.lengthSq() > 0) {\n                this.sumVec.normalize(); \n                this.sumVec.clampLength(-99999, this.maxSpeed);\n                this.fSteer.subVectors(this.sumVec, this.velocity);\n                this.fSteer.clampLength(-99999, this.maxForce); \n                this.fSteer.multiplyScalar(FLOCKING_WEIGHTS.SEPERATION); // Apply seperation weight. \n            }\n        }\n    }\n\n    cohesion(nAgents) {\n        this.target.set(0, 0, 0); \n        this.fSteer.set(0, 0, 0); \n\n        if (nAgents.length > 0) {\n            nAgents.forEach(n => {\n                this.target.add(n.position); \n            }); \n\n            this.target.divideScalar(nAgents.length); \n            this.seek(); // Seek the new target\n            this.fSteer.multiplyScalar(FLOCKING_WEIGHTS.COHESION); \n        }\n    }\n\n    align(nAgents) {\n        this.fSteer.set(0, 0, 0); \n\n        if (nAgents.length > 0) {\n            nAgents.forEach(a => {\n                this.fSteer.add(a.velocity); \n            }); \n        \n            this.fSteer.divideScalar(nAgents.length); \n            this.fSteer.normalize(); \n            this.fSteer.multiplyScalar(this.maxSpeed); \n            this.fSteer.sub(this.velocity); \n            this.fSteer.clampLength(-99999, this.maxForce); \n            this.fSteer.multiplyScalar(FLOCKING_WEIGHTS.ALIGNMENT); // Apply alignment weight. \n        }\n    }\n\n    setTarget(targetPos) {\n        this.target.copy(targetPos);\n    }\n    \n    getRandomArbitrary(min, max) {\n       return Math.random() * (max - min) + min;\n    }\n}","/*\r\n  Author: Amay Kataria\r\n  Date: 08/19/2021\r\n  Title: Pigeon.js\r\n  Description: Pigeon class that extends the agent class. It loads the bird model \r\n  and executes high level animations, etc. \r\n*/\r\n\r\nimport * as THREE from 'three'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'\r\nimport Agent from './Agent.js'\r\nimport model from '../models/Bird_simple.glb'; \r\nimport * as Utility from './Utility';\r\n\r\nconst loader = new GLTFLoader(); \r\n\r\nexport default class Pigeon extends Agent {\r\n    constructor(scene) {\r\n        super();\r\n        this.loadPigeon(scene); \r\n    }\r\n\r\n    loadPigeon(scene) {\r\n        loader.load(model, gltf => {\r\n            this.pigeon = gltf.scene; \r\n            \r\n            // Agent is the parent object under which pigeon sits. \r\n            this.parent = new THREE.Group();\r\n            this.parent.add(this.pigeon); \r\n            this.parent.frustumCulled = false;\r\n            this.parent.castShadow = true;\r\n            this.parent.receiveShadow = true; \r\n\r\n            // Store all the parameters that we'll be changing for this agent. \r\n            this.agentPosition = this.parent.position; \r\n            this.agentRotation = this.parent.rotation; \r\n            this.agentScale = this.parent.scale\r\n            this.agentAnimations = gltf.animations; \r\n\r\n            this.agentScale.set(0.50, 0.50, 0.50);\r\n\r\n            // Setup animation. \r\n            this.animationMixer = new THREE.AnimationMixer(this.parent); \r\n            var action = this.animationMixer.clipAction(this.agentAnimations[0]);\r\n            action.play(); \r\n\r\n            // Add it to the scene. \r\n            scene.add(this.parent); \r\n        }, undefined, function ( error ) {\r\n            console.error(error);\r\n        }); \r\n    }\r\n\r\n    update(delta, nAgents) {\r\n        // Animation update. \r\n        if (this.animationMixer) {\r\n            this.animationMixer.update(delta);\r\n\r\n            // Behaviors. \r\n            this.updateAgent(nAgents);  \r\n\r\n            // Sync rotation and position. \r\n            this.syncPosition();\r\n            this.syncRotation(); \r\n        }\r\n    }\r\n\r\n    syncPosition() {\r\n        // Sync position of the agent with \r\n        // the actual agent scene. \r\n        this.parent.position.copy(this.position);\r\n    }\r\n\r\n    syncRotation() {\r\n        // // Agent rotation.\r\n        let azimuth, inclination; \r\n        azimuth = Utility.azimuth(this.velocity); \r\n        inclination = Utility.inclination(this.velocity);\r\n\r\n        Utility.axisRotation(0, 1, 0, azimuth, this.rotationA); // Azimuth rotate around Z-axis\r\n        Utility.axisRotation(0, 0, 1, inclination - Math.PI/2, this.rotationB); // Inclination rotate X-axis\r\n                    \r\n        this.rotationA.multiply(this.rotationB);\r\n        this.parent.setRotationFromQuaternion(this.rotationA);\r\n    }\r\n}\r\n\r\n\r\n","import * as THREE from 'three';\n\nexport default class Target {\n    constructor(scene) {\n        let geometry = new THREE.SphereGeometry(0.2, 15, 15);\n        let material = new THREE.MeshLambertMaterial({color: new THREE.Color(1, 0, 0), wireframe: false}); \n        this.mesh = new THREE.Mesh(geometry, material);\n\n        scene.add(this.mesh);\n    }\n\n    getVector() {\n        return this.mesh.position; \n    }\n\n    setVector(v) {\n        this.mesh.position.copy(v);\n    }\n\n    setVisibility(v) {\n        this.mesh.visible = v;\n    }\n}","/*\n  Author: Amay Kataria\n  Date: 09/16/2021\n  Title: Terrain.js\n  Description: A class responsible to load the static terrain. This the natural landscape that \n  we bring in from Blender. \n*/\n\nimport * as THREE from 'three'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'\nimport terrain from '../models/world.glb'; \nimport * as Utility from './Utility';\n\nconst loader = new GLTFLoader(); \n\nexport default class Terrain {\n    constructor(scene) {\n        this.loadTerrain(scene); \n    }\n\n    loadTerrain(scene) {\n        loader.load(terrain, gltf => {\n            this.terrain = gltf.scene; \n            \n            // Agent is the parent object under which pigeon sits. \n            this.parent = new THREE.Group();\n            this.parent.add(this.terrain); \n            this.parent.frustumCulled = false;\n            this.parent.castShadow = true;\n            this.parent.receiveShadow = true; \n\n            // Store all the parameters that we'll be changing for this agent. \n            this.terrainPosition = this.parent.position; \n            this.terrainRotation = this.parent.rotation; \n            this.terrainScale = this.parent.scale\n\n            this.terrainScale.set(50, 50, 50);\n\n            // Add it to the scene. \n            scene.add(this.parent); \n        }, undefined, function ( error ) {\n            console.error(error);\n        }); \n    }\n\n    getMesh() {\n        return this.parent;\n    }\n}\n\n\n","import * as THREE from 'three'\n\nclass Pattern {\n    constructor(patternObj) {\n        this.theta_rad = 0; \n        this.amp = patternObj.amp;  \n        this.isClockwise = patternObj.dir; \n        this.originPos = patternObj.pos; \n        this.moveFactor = patternObj.move; \n        this.targetPos = new THREE.Vector3(0, 0, 0); // Agents follow this target. \n    }\n\n    updateTheta(maxTheta) {\n        // Update theta based on direction. \n        this.theta_rad = this.isClockwise ? \n            this.theta_rad + this.moveFactor : \n            this.theta_rad - this.moveFactor; \n\n        // Reset theta. \n        this.theta_rad = this.theta_rad >= maxTheta ? 0 : this.theta_rad;\n    }\n\n    cartesianX(r) {\n        return this.originPos.x + r * Math.cos(this.theta_rad);\n    }\n\n    cartesianZ(r) {\n        return this.originPos.z + r * Math.sin(this.theta_rad);\n    }\n    \n    cartesianY(r) {\n        return this.originPos.y + this.amp * Math.sin(this.theta_rad);\n    }\n\n    getTargetPos() {\n        return this.targetPos; \n    }\n\n    // Debug Only \n    // To see where we're at. \n    syncPatternObj() {\n        // SparkUtility.syncSceneObject(this.originObj, this.targetPos); \n    }\n}\n\nexport const ellipseConstructor = (originPos, radX, radZ, amplitude, isClockwise, moveFactor) => {\n    return {\n        pos: originPos, // C\n        radx: radX,\n        radz: radZ,\n        amp: amplitude, // C\n        dir: isClockwise, // C\n        move: moveFactor // C\n    }; \n}\n\nexport class EllipsePattern extends Pattern {\n    constructor(patternObj) {\n        super(patternObj); \n        this.radX = patternObj.radx; \n        this.radZ = patternObj.radz; \n        this.maxTheta = 2*Math.PI; \n    }\n\n    update() {\n        // Ellipse: Cartesian coordinates. \n        let xPos = this.cartesianX(this.radX); // Defines polar curve. \n        let zPos = this.cartesianZ(this.radZ); // Define polar curve. \n        let yPos = this.cartesianY(); // Defines height. \n        this.targetPos.set(xPos, yPos, zPos); \n\n        this.updateTheta(this.maxTheta); \n    }\n}\n\nexport const roseConstructor = (originPos, radius, phase, numPetals, amplitude, isSinusoidal, isClockwise, moveFactor) => {\n    return {\n        pos: originPos, // C\n        rad: radius,\n        ph: phase, \n        numP: numPetals,\n        amp: amplitude, // C\n        isSin: isSinusoidal,\n        dir: isClockwise, // C\n        move: moveFactor // C\n    }\n}\n\n// r = asin(b + cTheta); \n// r = acos(b + cTheta); \n// a = radius\n// b = phase\n// c = numPetals\nexport class RosePattern extends Pattern {\n    constructor(patternObj) {\n        super(patternObj); \n        this.rad = patternObj.rad; \n        this.phase = patternObj.ph; \n        this.numPetals = patternObj.numP;\n        this.isSin = patternObj.isSin; \n        this.maxTheta = Math.PI; \n    }\n\n    update() {\n        let xPos, yPos, zPos; \n        let r = this.isSin ? this.rad * Math.sin(this.phase + this.numPetals * this.theta_rad) : \n            this.rad * Math.cos(this.phase + this.numPetals * this.theta_rad)\n\n        xPos = this.cartesianX(r); // Defines polar curve. \n        zPos = this.cartesianZ(r); // Defines polar curve. \n        yPos = this.cartesianY(); // Defines height. \n\n        this.targetPos.set(xPos, yPos, zPos); \n\n        this.updateTheta(this.maxTheta);\n    }\n}","\r\n/*\r\n  Author: Amay Kataria\r\n  Date: 09/13/2021\r\n  Title: OctreeManager.js\r\n  Description: Octree is a tree data structure where each parent can have uptill 8 children.\r\n  We use this data structure to improve the performance of the flock. Now, every agent doesn't \r\n  have to test against every other agent. This data structure helps keep a list of neighbors for each\r\n  agent. \r\n*/\r\n\r\nimport { Vector3 } from 'math-ds';\r\nimport { PointOctree } from 'sparse-octree'; \r\n\r\nconst BIAS = 0.0; // No loose octree. \r\nconst MAX_POINTS = 2.0; // Maximum points before the tree splits. \r\nexport class Octree {\r\n    constructor(origin, boundary) {\r\n        let min = new Vector3(0, 0, 0);\r\n        let max = new Vector3(0, 0, 0);\r\n\r\n        min.x = origin.x - boundary; \r\n        min.y = origin.y - boundary; \r\n        min.z = origin.z - boundary; \r\n\r\n        max.x = origin.x + boundary; \r\n        max.y = origin.y + boundary; \r\n        max.z = origin.z + boundary;\r\n\r\n        this.tree = new PointOctree(min, max, BIAS, MAX_POINTS); \r\n    }\r\n\r\n    // Insert a point into the octree along with the data that should be retried. \r\n    insertPoint(position, agent) {\r\n        this.tree.insert(position, agent); \r\n    }\r\n\r\n    // Finds all the points in the octree within a given radius. \r\n    scanForPoints(position, radius) {\r\n        return this.tree.findPoints(position, radius, true); \r\n    }\r\n\r\n    pointCount() {\r\n        return this.tree.pointCount; \r\n    } \r\n}\r\n\r\nconst OCTREE_HOOD_BOUNDARY = 20; \r\nconst NEIGHBOUR_RADIUS = 5; // Radius from the origin.\r\nexport class OctreeManager {\r\n    constructor() {\r\n        this.flockOctree = {};\r\n    }\r\n\r\n    update(flockTarget, liarbirds) {\r\n        this.setupOctree(flockTarget, liarbirds); \r\n    }\r\n\r\n    setupOctree(flockTarget, liarbirds) {\r\n        this.flockOctree = new Octree(flockTarget, OCTREE_HOOD_BOUNDARY); \r\n        liarbirds.forEach(l => {\r\n            this.flockOctree.insertPoint(l.position, l); \r\n        }); \r\n    }\r\n\r\n    // Neighbours around a point. \r\n    getNeighbours(origin) {\r\n        let neighbours; let nAgents=[]; \r\n        neighbours = this.flockOctree.scanForPoints(origin, NEIGHBOUR_RADIUS);\r\n        neighbours.forEach(n => {\r\n            let a = n['data']; \r\n            nAgents.push(a); \r\n        }); \r\n        return nAgents; \r\n    }\r\n}\r\n\r\n          ","/*\n  Name: World.js\n  Author: Amay Kataria\n  Date: 08/19/2021\n  Description: This is where Three.js world is initialized. It's the entry point for the three-dimensional \n  world and creating all elements. \n*/\n\nimport React from 'react'\nimport Radium from 'radium'\nimport * as THREE from 'three'\nimport oc from 'three-orbit-controls'\nimport Stats from 'stats.js'\nimport * as dat from 'dat.gui'\nimport Pigeon from './Pigeon.js'\nimport Target from './Target.js'\nimport Terrain from './Terrain.js'\nimport {EllipsePattern, ellipseConstructor} from './PatternManager'\nimport { OctreeManager } from './OctreeManager.js'\n\nconst OrbitControls = oc(THREE); \nconst Raycaster = new THREE.Raycaster();\nconst mouse = new THREE.Vector2(); \n\nexport const WORLD_STATE = {\n  PATTERN: 0,\n  FLOCK: 1\n}; \nconst NUM_PIGEONS = 50; \n\nconst styles = {\n  container: {\n      // position: 'absolute',\n      zIndex: 0,\n      top: '0%',\n      overflowX: 'hidden',\n      overflowY: 'auto'\n  }\n};\n\n// Gui Parameters. \nconst worldParams = {\n  showGrid: true,\n  showTarget: true\n};\n\nlet ellipseParams = {\n  height: 6,\n  radiusX: 10,\n  radiusZ:  10,\n  amplitude: 0,\n  speed: 0.3\n}\n\nclass World extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state={};\n\n    // Pointer to the div that holds the Three.js world.\n    this.ref = React.createRef(); \n    \n    // 3D scene object where everything is added. \n    this.scene = new THREE.Scene(); \n\n    // Static setup that can happen after scene is initialized. \n    this.setupCamera();  \n    this.setupProps(); \n    this.setupGui(); \n    this.setupLighting();\n    this.setupRenderer(); \n    this.setupOrbitControls(); \n\n    // Create the target object. \n    this.target = new Target(this.scene);\n\n    // Other helpers. \n    this.stats = new Stats(); \n    this.clock = new THREE.Clock(); \n\n    this.setupPattern();\n    this.octreeManager = new OctreeManager();\n    \n    this.pigeons = []; \n  }\n\n  componentDidMount() {\n    // Mount the canvas at the current div. \n    this.ref.current.appendChild(this.renderer.domElement); \n    this.ref.current.appendChild(this.stats.dom);\n\n    // Pigeon Geometry. \n    for (let i = 0; i < NUM_PIGEONS; i++) {\n      // Create these pigeons at random locations from each other\n      // But within some radius. \n      let p = new Pigeon(this.scene); \n      this.pigeons.push(p);\n    }\n\n    this.initThreeRender(); \n\n    window.addEventListener( 'mousemove', this.onMouseMove.bind(this), false );\n    window.addEventListener('click', this.onClick.bind(this), true)\n  }\n\n  // Called every animation frame. \n  update() {\n    // Update everything in here. \n    //this.grid.visible = guiParams.showGrid;\n    this.target.setVisibility(worldParams.showTarget);\n\n    // Update agent and its position. \n    var delta = this.clock.getDelta(); \n\n    // Pattern's position. \n    this.ellipsePattern.update();\n    let patternPos = this.ellipsePattern.getTargetPos();\n\n    // Update octree. Note: On every update, we instantiate a new octree\n    // and populate it with the new pigeon position. So everytime, \n    // the neighbors get updated. \n    this.octreeManager.update(patternPos, this.pigeons); \n\n    let nAgents = []; // Neighboring agents. \n    this.pigeons.forEach(p => {\n      p.setTarget(patternPos); \n      nAgents = this.octreeManager.getNeighbours(p.position); \n      p.update(delta, nAgents); \n    });\n\n    // Set the target object's position. \n    this.target.setVector(patternPos);\n\n    // console.log(this.camera.position);\n  }\n\n  // Render three.js world. \n  render() {\n    return (\n      <div style={styles.container} ref={this.ref} />\n    );\n  }\n\n  initThreeRender() {\n    // Render loop. \n    this.stats.begin();\n    this.update(); \n    this.controls.update();\n    this.renderer.render(this.scene, this.camera);\n    this.stats.end();\n\n    // Register this function as a callback to every repaint from the browser.\n    requestAnimationFrame(this.initThreeRender.bind(this)); \n  }\n\n  setupRenderer() {\n    // Core renderer. \n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    }); \n    this.renderer.setClearColor(0x0b5213, 1);    // Set renderer properties\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.outputEncoding = THREE.sRGBEncoding; \n  }\n\n  setupOrbitControls() {\n    this.controls = new OrbitControls(this.camera, this.render.domElement); \n    this.controls.enablePan = true;\n    // controls.autoRotate = true; \n    // controls.autoRotateSpeed = 0.1;\n    this.controls.enabled = true; \n    this.controls.enableKeys = true;\n  }\n\n  setupCamera() {\n    // Camera Setup\n    // (FOV, AspectRatio, Near Clipping, Far Clipping)\n    this.camera = new THREE.PerspectiveCamera(60, window.innerWidth/window.innerHeight, 0.05, 20000);\n    this.camera.position.set(4, 4, 4); \n    this.camera.lookAt(new THREE.Vector3(0, 0, 0));\n    this.camera.frustumCulled = false; \n  }\n\n  setupProps() {\n    this.terrain = new Terrain(this.scene); \n    //this.scene.add(new THREE.AxesHelper(30));\n    // Definitely need the grid helper. \n    //this.grid = new THREE.GridHelper(30, 10);\n    // this.scene.add(this.grid);\n  }\n\n  setupLighting() {\n    // -------- Lighting ----------------\n    var ambientLight = new THREE.AmbientLight(0xD7D3D3);\n    ambientLight.intensity = 0.5;\n    var directionalLight = new THREE.DirectionalLight(0xffffff);\n    directionalLight.intensity = 1.0;\n    directionalLight.position.set(0, 100, 0).normalize();\n    //this.scene.add(ambientLight);\n    this.scene.add(directionalLight);\t\n  }\n\n  // TODO: Tie the gui params to the actual parameters.\n  setupGui() {\n    this.gui = new dat.GUI();\n    let worldFolder = this.gui.addFolder('World Params');\n    worldFolder.add(worldParams, 'showGrid' ).name('Show Grid');\n    worldFolder.add(worldParams, 'showTarget').name('Show Target');\n\n    let ellipseFolder = this.gui.addFolder('Ellipse Params'); \n    \n    // Height\n    ellipseFolder.add(ellipseParams, 'height').name('Height')\n    .min(5).max(15).step(0.5)\n    .onFinishChange(this.onFinishEllipseParams.bind(this));\n\n    // RadiusX\n    ellipseFolder.add(ellipseParams, 'radiusX').name('RadX')\n    .min(5).max(20).step(0.5)\n    .onFinishChange(this.onFinishEllipseParams.bind(this));\n\n    // RadiusZ\n    ellipseFolder.add(ellipseParams, 'radiusZ').name('RadZ')\n    .min(5).max(20).step(0.5)\n    .onFinishChange(this.onFinishEllipseParams.bind(this)); \n  }\n\n  onFinishEllipseParams(v) {\n    // Create a data package and send \n  }\n\n  getRandomArbitrary(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n\n  setupPattern() {\n    let pos = new THREE.Vector3(0, 6, 0); // Target position\n    let radX = 10; \n    let radZ = 10;\n    let amp = 0; \n    let dir = true; \n    let moveFactor = THREE.Math.degToRad(0.3); \n    let patternObj = ellipseConstructor(pos, radX, radZ, amp, dir, moveFactor); \n    this.ellipsePattern = new EllipsePattern(patternObj); \n  }\n\n  \n  onMouseMove(event) {\n    //mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n    //mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n    console.log(mouse.x + ', ' + mouse.y);\n  }\n\n  onClick(event) {\n    mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n    mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n\n    Raycaster.setFromCamera(mouse, this.camera);\n\n    // calculate objects intersecting the picking ray\n    const intersects = Raycaster.intersectObject(this.terrain.getMesh(), true);\n    for (let i = 0; i < intersects.length; i ++) {\n      //intersects[ i ].object.material.color.set( 0xff0000 );\n    }\n    console.log('Mouse Clicked');\n  }\n}\n\nexport default Radium(World);","/*\n  Name: App.js\n  Author: Amay Kataria\n  Date: 08/19/2021\n  Description: Entry point for the application.\n*/\n\nimport React from 'react'\nimport Radium from 'radium'\nimport World from './World.js'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state={\n    };\n\n    this.totalRef = React.createRef(); \n    this.worldRef = React.createRef(); \n  }\n\n  render() {\n    return (\n      <div>\n          <World ref={this.worldRef} />\n      </div>\n    );\n  }\n\n  componentDidUpdate() {\n    console.log(this.totalRef.current.scrollHeight);\n  }\n}\n\nexport default Radium(App);\n\n// Some logic to realign the height of the world. \n// setTimeout(() => {\n//   // let totalHeight = this.totalRef.current.scrollHeight; \n//   // let totalHeight = 600; \n//   // this.worldRef.current.updateRendererHeight(totalHeight);\n//   // console.log(totalHeight);\n// }, 300); ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './font/stylesheet.css';\nimport App from './components/App';\nimport {StyleRoot} from 'radium'\n\n// Use StyleRoot to enable keyframes and media queries for Javascript type\n// styles with Radium in components. \n// Single render function for the entire application. \nReactDOM.render(<StyleRoot><App /></StyleRoot>, document.getElementById('root'));"],"sourceRoot":""}